package kz.tamur.smartcontracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.2.0.
 */
public class JSSBContract extends Contract {
    private static final String BINARY = "";

    protected JSSBContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected JSSBContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<PledgeRecordCreatedEventResponse> getPledgeRecordCreatedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("PledgeRecordCreated", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<PledgeRecordCreatedEventResponse> responses = new ArrayList<PledgeRecordCreatedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            PledgeRecordCreatedEventResponse typedResponse = new PledgeRecordCreatedEventResponse();
            typedResponse._documentId = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._pledgorId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._guarantorsIds = (List<byte[]>) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<PledgeRecordCreatedEventResponse> pledgeRecordCreatedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("PledgeRecordCreated", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, PledgeRecordCreatedEventResponse>() {
            @Override
            public PledgeRecordCreatedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                PledgeRecordCreatedEventResponse typedResponse = new PledgeRecordCreatedEventResponse();
                typedResponse._documentId = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._pledgorId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._guarantorsIds = (List<byte[]>) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<PledgeRecordApprovedByPledgorEventResponse> getPledgeRecordApprovedByPledgorEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("PledgeRecordApprovedByPledgor", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<PledgeRecordApprovedByPledgorEventResponse> responses = new ArrayList<PledgeRecordApprovedByPledgorEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            PledgeRecordApprovedByPledgorEventResponse typedResponse = new PledgeRecordApprovedByPledgorEventResponse();
            typedResponse._documentId = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._pledgorId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<PledgeRecordApprovedByPledgorEventResponse> pledgeRecordApprovedByPledgorEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("PledgeRecordApprovedByPledgor", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, PledgeRecordApprovedByPledgorEventResponse>() {
            @Override
            public PledgeRecordApprovedByPledgorEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                PledgeRecordApprovedByPledgorEventResponse typedResponse = new PledgeRecordApprovedByPledgorEventResponse();
                typedResponse._documentId = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._pledgorId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<PledgeRecordApprovedByPledgorsEventResponse> getPledgeRecordApprovedByPledgorsEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("PledgeRecordApprovedByPledgors", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<PledgeRecordApprovedByPledgorsEventResponse> responses = new ArrayList<PledgeRecordApprovedByPledgorsEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            PledgeRecordApprovedByPledgorsEventResponse typedResponse = new PledgeRecordApprovedByPledgorsEventResponse();
            typedResponse._documentId = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._RKA = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._pledgorId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._guarantorsIds = (List<byte[]>) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<PledgeRecordApprovedByPledgorsEventResponse> pledgeRecordApprovedByPledgorsEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("PledgeRecordApprovedByPledgors", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, PledgeRecordApprovedByPledgorsEventResponse>() {
            @Override
            public PledgeRecordApprovedByPledgorsEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                PledgeRecordApprovedByPledgorsEventResponse typedResponse = new PledgeRecordApprovedByPledgorsEventResponse();
                typedResponse._documentId = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._RKA = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._pledgorId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._guarantorsIds = (List<byte[]>) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<PledgeRecordCheckingApprovedByGBDRNEventResponse> getPledgeRecordCheckingApprovedByGBDRNEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("PledgeRecordCheckingApprovedByGBDRN", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<PledgeRecordCheckingApprovedByGBDRNEventResponse> responses = new ArrayList<PledgeRecordCheckingApprovedByGBDRNEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            PledgeRecordCheckingApprovedByGBDRNEventResponse typedResponse = new PledgeRecordCheckingApprovedByGBDRNEventResponse();
            typedResponse._documentId = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._checkingOpinion = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._paymentParams = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<PledgeRecordCheckingApprovedByGBDRNEventResponse> pledgeRecordCheckingApprovedByGBDRNEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("PledgeRecordCheckingApprovedByGBDRN", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, PledgeRecordCheckingApprovedByGBDRNEventResponse>() {
            @Override
            public PledgeRecordCheckingApprovedByGBDRNEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                PledgeRecordCheckingApprovedByGBDRNEventResponse typedResponse = new PledgeRecordCheckingApprovedByGBDRNEventResponse();
                typedResponse._documentId = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._checkingOpinion = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._paymentParams = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<PledgeRecordCheckingCancelledByGBDRNEventResponse> getPledgeRecordCheckingCancelledByGBDRNEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("PledgeRecordCheckingCancelledByGBDRN", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<PledgeRecordCheckingCancelledByGBDRNEventResponse> responses = new ArrayList<PledgeRecordCheckingCancelledByGBDRNEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            PledgeRecordCheckingCancelledByGBDRNEventResponse typedResponse = new PledgeRecordCheckingCancelledByGBDRNEventResponse();
            typedResponse._documentId = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._checkingOpinion = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<PledgeRecordCheckingCancelledByGBDRNEventResponse> pledgeRecordCheckingCancelledByGBDRNEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("PledgeRecordCheckingCancelledByGBDRN", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, PledgeRecordCheckingCancelledByGBDRNEventResponse>() {
            @Override
            public PledgeRecordCheckingCancelledByGBDRNEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                PledgeRecordCheckingCancelledByGBDRNEventResponse typedResponse = new PledgeRecordCheckingCancelledByGBDRNEventResponse();
                typedResponse._documentId = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._checkingOpinion = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<PledgeRecordPaymentCompletedEventResponse> getPledgeRecordPaymentCompletedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("PledgeRecordPaymentCompleted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<PledgeRecordPaymentCompletedEventResponse> responses = new ArrayList<PledgeRecordPaymentCompletedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            PledgeRecordPaymentCompletedEventResponse typedResponse = new PledgeRecordPaymentCompletedEventResponse();
            typedResponse._documentId = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._RKA = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._bankId = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._documentHash = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse._paymentId = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse._pledgorId = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse._guarantorsIds = (List<byte[]>) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<PledgeRecordPaymentCompletedEventResponse> pledgeRecordPaymentCompletedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("PledgeRecordPaymentCompleted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, PledgeRecordPaymentCompletedEventResponse>() {
            @Override
            public PledgeRecordPaymentCompletedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                PledgeRecordPaymentCompletedEventResponse typedResponse = new PledgeRecordPaymentCompletedEventResponse();
                typedResponse._documentId = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._RKA = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._bankId = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._documentHash = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse._paymentId = (String) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse._pledgorId = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
                typedResponse._guarantorsIds = (List<byte[]>) eventValues.getNonIndexedValues().get(6).getValue();
                return typedResponse;
            }
        });
    }

    public List<PledgeRecordRegisteredEventResponse> getPledgeRecordRegisteredEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("PledgeRecordRegistered", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<PledgeRecordRegisteredEventResponse> responses = new ArrayList<PledgeRecordRegisteredEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            PledgeRecordRegisteredEventResponse typedResponse = new PledgeRecordRegisteredEventResponse();
            typedResponse._documentId = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._notificationId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._finalOpinion = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<PledgeRecordRegisteredEventResponse> pledgeRecordRegisteredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("PledgeRecordRegistered", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, PledgeRecordRegisteredEventResponse>() {
            @Override
            public PledgeRecordRegisteredEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                PledgeRecordRegisteredEventResponse typedResponse = new PledgeRecordRegisteredEventResponse();
                typedResponse._documentId = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._notificationId = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._finalOpinion = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<PledgeRecordCancelledEventResponse> getPledgeRecordCancelledEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("PledgeRecordCancelled", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<PledgeRecordCancelledEventResponse> responses = new ArrayList<PledgeRecordCancelledEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            PledgeRecordCancelledEventResponse typedResponse = new PledgeRecordCancelledEventResponse();
            typedResponse._documentId = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._notificationId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._finalOpinion = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<PledgeRecordCancelledEventResponse> pledgeRecordCancelledEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("PledgeRecordCancelled", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, PledgeRecordCancelledEventResponse>() {
            @Override
            public PledgeRecordCancelledEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                PledgeRecordCancelledEventResponse typedResponse = new PledgeRecordCancelledEventResponse();
                typedResponse._documentId = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._notificationId = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._finalOpinion = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<Tuple4<BigInteger, byte[], byte[], BigInteger>> getRecordByDocumentIdAndUserId(String _documentId, byte[] _userId) {
        final Function function = new Function("getRecordByDocumentIdAndUserId", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_documentId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_userId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple4<BigInteger, byte[], byte[], BigInteger>>(
                new Callable<Tuple4<BigInteger, byte[], byte[], BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, byte[], byte[], BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple4<BigInteger, byte[], byte[], BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<String> getCheckingOpinionByDocumentId(String _documentId) {
        Function function = new Function("getCheckingOpinionByDocumentId", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_documentId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple4<List<BigInteger>, List<byte[]>, List<byte[]>, List<byte[]>>> getRecordsByBankId(byte[] _bankId) {
        final Function function = new Function("getRecordsByBankId", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_bankId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<Tuple4<List<BigInteger>, List<byte[]>, List<byte[]>, List<byte[]>>>(
                new Callable<Tuple4<List<BigInteger>, List<byte[]>, List<byte[]>, List<byte[]>>>() {
                    @Override
                    public Tuple4<List<BigInteger>, List<byte[]>, List<byte[]>, List<byte[]>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple4<List<BigInteger>, List<byte[]>, List<byte[]>, List<byte[]>>(
                                (List<BigInteger>) results.get(0).getValue(), 
                                (List<byte[]>) results.get(1).getValue(), 
                                (List<byte[]>) results.get(2).getValue(), 
                                (List<byte[]>) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> createRecord(String _bankId, String _RKA, String _documentHash, String _documentId, byte[] _pledgorId, List<byte[]> _guarantorsIds) {
        Function function = new Function(
                "createRecord", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_bankId), 
                new org.web3j.abi.datatypes.Utf8String(_RKA), 
                new org.web3j.abi.datatypes.Utf8String(_documentHash), 
                new org.web3j.abi.datatypes.Utf8String(_documentId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_pledgorId), 
                _guarantorsIds.size() > 0 ?
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.Utils.typeMap(_guarantorsIds, org.web3j.abi.datatypes.generated.Bytes32.class)) : org.web3j.abi.datatypes.DynamicArray.empty(org.web3j.abi.datatypes.generated.Bytes32.class.getName())),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getUserRecordsCount(byte[] _userId) {
        Function function = new Function(
                "getUserRecordsCount", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_userId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> checkingCancelledByGBDRN(String _documentId, String _checkingOpinion) {
        Function function = new Function(
                "checkingCancelledByGBDRN", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_documentId), 
                new org.web3j.abi.datatypes.Utf8String(_checkingOpinion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple4<List<BigInteger>, List<byte[]>, List<byte[]>, List<BigInteger>>> getRecordsByUserId(byte[] _userId) {
        final Function function = new Function("getRecordsByUserId", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_userId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple4<List<BigInteger>, List<byte[]>, List<byte[]>, List<BigInteger>>>(
                new Callable<Tuple4<List<BigInteger>, List<byte[]>, List<byte[]>, List<BigInteger>>>() {
                    @Override
                    public Tuple4<List<BigInteger>, List<byte[]>, List<byte[]>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple4<List<BigInteger>, List<byte[]>, List<byte[]>, List<BigInteger>>(
                                (List<BigInteger>) results.get(0).getValue(), 
                                (List<byte[]>) results.get(1).getValue(), 
                                (List<byte[]>) results.get(2).getValue(), 
                                (List<BigInteger>) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> cancelledByGbdrn(String _documentId, String _notificationId, String _finalOpinion) {
        Function function = new Function(
                "cancelledByGbdrn", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_documentId), 
                new org.web3j.abi.datatypes.Utf8String(_notificationId), 
                new org.web3j.abi.datatypes.Utf8String(_finalOpinion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> approvedByGuarantor(String _documentId, byte[] _guarantorId) {
        Function function = new Function(
                "approvedByGuarantor", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_documentId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_guarantorId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getFinalOpinionByDocumentId(String _documentId) {
        Function function = new Function("getFinalOpinionByDocumentId", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_documentId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> stringToBytes32(String source) {
        Function function = new Function(
                "stringToBytes32", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(source)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> approvedByPledgor(String _documentId, byte[] _pledgorId) {
        Function function = new Function(
                "approvedByPledgor", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_documentId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_pledgorId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> paymentCompleted(String _documentId, String _paymentId) {
        Function function = new Function(
                "paymentCompleted", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_documentId), 
                new org.web3j.abi.datatypes.Utf8String(_paymentId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> registeredByGbdrn(String _documentId, String _notificationId, String _finalOpinion) {
        Function function = new Function(
                "registeredByGbdrn", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_documentId), 
                new org.web3j.abi.datatypes.Utf8String(_notificationId), 
                new org.web3j.abi.datatypes.Utf8String(_finalOpinion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<byte[]> getNotificationIdByDocumentId(String _documentId) {
        Function function = new Function("getNotificationIdByDocumentId", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_documentId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<TransactionReceipt> checkingApprovedByGBDRN(String _documentId, String _checkingOpinion, String _paymentParams) {
        Function function = new Function(
                "checkingApprovedByGBDRN", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_documentId), 
                new org.web3j.abi.datatypes.Utf8String(_checkingOpinion), 
                new org.web3j.abi.datatypes.Utf8String(_paymentParams)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<JSSBContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(JSSBContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<JSSBContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(JSSBContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static JSSBContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new JSSBContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static JSSBContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new JSSBContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class PledgeRecordCreatedEventResponse {
        public String _documentId;

        public byte[] _pledgorId;

        public List<byte[]> _guarantorsIds;
    }

    public static class PledgeRecordApprovedByPledgorEventResponse {
        public String _documentId;

        public byte[] _pledgorId;
    }

    public static class PledgeRecordApprovedByPledgorsEventResponse {
        public String _documentId;

        public String _RKA;

        public byte[] _pledgorId;

        public List<byte[]> _guarantorsIds;
    }

    public static class PledgeRecordCheckingApprovedByGBDRNEventResponse {
        public String _documentId;

        public String _checkingOpinion;

        public String _paymentParams;
    }

    public static class PledgeRecordCheckingCancelledByGBDRNEventResponse {
        public String _documentId;

        public String _checkingOpinion;
    }

    public static class PledgeRecordPaymentCompletedEventResponse {
        public String _documentId;

        public String _RKA;

        public String _bankId;

        public String _documentHash;

        public String _paymentId;

        public byte[] _pledgorId;

        public List<byte[]> _guarantorsIds;
    }

    public static class PledgeRecordRegisteredEventResponse {
        public String _documentId;

        public String _notificationId;

        public String _finalOpinion;
    }

    public static class PledgeRecordCancelledEventResponse {
        public String _documentId;

        public String _notificationId;

        public String _finalOpinion;
    }
}
