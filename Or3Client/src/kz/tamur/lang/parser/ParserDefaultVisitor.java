/* Generated By:JavaCC: Do not edit this line. ParserDefaultVisitor.java Version 6.1_2 */
package kz.tamur.lang.parser;


public class ParserDefaultVisitor implements ParserVisitor{
  public Object defaultVisit(SimpleNode node, Object data) throws Exception{
    node.childrenAccept(this, data);
    return data;
  }
  public Object visit(SimpleNode node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTStart node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTDecl node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTSet node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTReturn node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTBreak node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTContinue node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTIf node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTBlock node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTForeach node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTWhile node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTVar node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTGlobalCall node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTExec node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTMethod node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTType node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTBinary node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTUnary node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTField node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTAccess node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTIndex node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTConstruct node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTNumber node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTString node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTBoolean node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTNull node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTTry node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTCatch node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTFinally node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTThrow node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
@Override
public Object visit(ASTFunc node, Object data) throws Exception {
	// TODO Auto-generated method stub
	return null;
}
@Override
public Object visit(ASTFuncArgs node, Object data) throws Exception {
	// TODO Auto-generated method stub
	return null;
}

}
/* JavaCC - OriginalChecksum=2aabcc38c58ab62f24de85edef19a4d0 (do not edit this line) */
