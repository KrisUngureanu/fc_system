/* Generated By:JJTree&JavaCC: Do not edit this line. Parser.java */
package kz.tamur.lang.parser;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants, ParserConstants {/*@bgen(jjtree)*/
  protected JJTParserState jjtree = new JJTParserState();

  final public ASTStart Start() throws ParseException {
 /*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
        case TRUE:
        case FALSE:
        case NULL:
        case INTEGER_LITERAL:
        case HEX_LITERAL:
        case OCTAL_LITERAL:
        case FLOAT_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case 24:
        case 25:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 36:
        case 37:
        case 38:
        case 39:
        case 49:
        case 50:
        case 56:
        case 59:
        case 62:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        if (jj_2_1(2147483647)) {
          DeclDir();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 24:
          case 29:
          case 30:
          case 31:
          case 32:
          case 33:
          case 36:
          case 37:
          case 59:
          case 62:
            Directive();
            break;
          case NEW:
          case TRUE:
          case FALSE:
          case NULL:
          case INTEGER_LITERAL:
          case HEX_LITERAL:
          case OCTAL_LITERAL:
          case FLOAT_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case 25:
          case 38:
          case 39:
          case 49:
          case 50:
          case 56:
            Expression();
            break;
          default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      jj_consume_token(0);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Directive() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 29:
      SetDir();
      break;
    case 33:
      IfDir();
      break;
    case 36:
      ForeachDir();
      break;
    case 37:
      WhileDir();
      break;
    case 30:
      ReturnDir();
      break;
    case 31:
      BreakDir();
      break;
    case 32:
      ContinueDir();
      break;
    case 59:
      Try();
      break;
    case 62:
      Throw();
      break;
    case 24:
      FuncDir();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DeclDir() throws ParseException {
 /*@bgen(jjtree) Decl */
  ASTDecl jjtn000 = new ASTDecl(JJTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Type();
      Var();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 23:
        jj_consume_token(23);
        Expression();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void FuncDir() throws ParseException {
 /*@bgen(jjtree) Func */
        ASTFunc jjtn000 = new ASTFunc(JJTFUNC);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(24);
      t = jj_consume_token(IDENTIFIER);
          jjtn000.setName(t.image); jjtn000.setLine(jj_input_stream.getEndLine());
      jj_consume_token(25);
              ASTFuncArgs jjtn001 = new ASTFuncArgs(JJTFUNCARGS);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 38:
          Var();
          label_2:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 26:
              ;
              break;
            default:
              jj_la1[4] = jj_gen;
              break label_2;
            }
            jj_consume_token(26);
            Var();
          }
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
      } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
      } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 0);
              }
      }
      jj_consume_token(27);
      Block();
      jj_consume_token(28);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void SetDir() throws ParseException {
 /*@bgen(jjtree) Set */
  ASTSet jjtn000 = new ASTSet(JJTSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.setLine(jj_input_stream.getEndLine());
      jj_consume_token(29);
      jj_consume_token(25);
      Var();
      jj_consume_token(23);
      Expression();
      jj_consume_token(27);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ReturnDir() throws ParseException {
 /*@bgen(jjtree) Return */
  ASTReturn jjtn000 = new ASTReturn(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.setLine(jj_input_stream.getEndLine());
      jj_consume_token(30);
      if (jj_2_2(2)) {
        Expression();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void BreakDir() throws ParseException {
 /*@bgen(jjtree) Break */
  ASTBreak jjtn000 = new ASTBreak(JJTBREAK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.setLine(jj_input_stream.getEndLine());
      jj_consume_token(31);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ContinueDir() throws ParseException {
 /*@bgen(jjtree) Continue */
  ASTContinue jjtn000 = new ASTContinue(JJTCONTINUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.setLine(jj_input_stream.getEndLine());
      jj_consume_token(32);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void IfDir() throws ParseException {
 /*@bgen(jjtree) If */
        ASTIf jjtn000 = new ASTIf(JJTIF);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);ASTBlock b;
        ASTIf parent;
    try {
          parent = jjtn000; jjtn000.setLine(jj_input_stream.getEndLine());
      jj_consume_token(33);
      jj_consume_token(25);
      Expression();
      jj_consume_token(27);
      b = Block();
                      jjtn000.setBlock(b);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 34:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_3;
        }
           ASTIf jjtn001 = new ASTIf(JJTIF);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(34);
          jj_consume_token(25);
          Expression();
          jj_consume_token(27);
          b = Block();
                                                       jjtree.closeNodeScope(jjtn001, true);
                                                       jjtc001 = false;
                                                       jjtn001.setBlock(b); parent.addElif(jjtn001);
        } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
        } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
           }
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 35:
        jj_consume_token(35);
        b = Block();
                               jjtn000.setElseBlock(b);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(28);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public ASTBlock Block() throws ParseException {
 /*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
        case TRUE:
        case FALSE:
        case NULL:
        case INTEGER_LITERAL:
        case HEX_LITERAL:
        case OCTAL_LITERAL:
        case FLOAT_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case 24:
        case 25:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 36:
        case 37:
        case 38:
        case 39:
        case 49:
        case 50:
        case 56:
        case 59:
        case 62:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_4;
        }
        if (jj_2_3(2)) {
          Directive();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NEW:
          case TRUE:
          case FALSE:
          case NULL:
          case INTEGER_LITERAL:
          case HEX_LITERAL:
          case OCTAL_LITERAL:
          case FLOAT_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case 25:
          case 38:
          case 39:
          case 49:
          case 50:
          case 56:
            Expression();
            break;
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                     {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void ForeachDir() throws ParseException {
 /*@bgen(jjtree) Foreach */
  ASTForeach jjtn000 = new ASTForeach(JJTFOREACH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.setLine(jj_input_stream.getEndLine());
      jj_consume_token(36);
      jj_consume_token(25);
      Var();
      jj_consume_token(IN);
      Expression();
      jj_consume_token(27);
      Block();
      jj_consume_token(28);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void WhileDir() throws ParseException {
 /*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.setLine(jj_input_stream.getEndLine());
      jj_consume_token(37);
      jj_consume_token(25);
      Expression();
      jj_consume_token(27);
      Block();
      jj_consume_token(28);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Var() throws ParseException {
 /*@bgen(jjtree) Var */
        ASTVar jjtn000 = new ASTVar(JJTVAR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(38);
      t = jj_consume_token(IDENTIFIER);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setName(t.image); jjtn000.setLine(jj_input_stream.getEndLine());
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void GlobalCall() throws ParseException {
 /*@bgen(jjtree) GlobalCall */
  ASTGlobalCall jjtn000 = new ASTGlobalCall(JJTGLOBALCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Method();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Exec() throws ParseException {
 /*@bgen(jjtree) Exec */
  ASTExec jjtn000 = new ASTExec(JJTEXEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.setLine(jj_input_stream.getEndLine());
      jj_consume_token(39);
      ParamList();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Method() throws ParseException {
 /*@bgen(jjtree) Method */
        ASTMethod jjtn000 = new ASTMethod(JJTMETHOD);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                       jjtn000.setName(t.image); jjtn000.setLine(jj_input_stream.getEndLine());
      ParamList();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Type() throws ParseException {
 /*@bgen(jjtree) Type */
        ASTType jjtn000 = new ASTType(JJTTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        StringBuilder typeName = new StringBuilder();
    try {
      t = jj_consume_token(IDENTIFIER);
                           jjtn000.addName(t.image);
      label_5:
      while (true) {
        if (jj_2_4(2147483647) && (getToken(2).kind == IDENTIFIER
                                  && !getToken(3).image.equals("(")
                                  && !getToken(3).image.equals("["))) {
          ;
        } else {
          break label_5;
        }
        jj_consume_token(40);
        t = jj_consume_token(IDENTIFIER);
           jjtn000.addName(t.image);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setLine(jj_input_stream.getEndLine());
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ParamList() throws ParseException {
    jj_consume_token(25);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case TRUE:
    case FALSE:
    case NULL:
    case INTEGER_LITERAL:
    case HEX_LITERAL:
    case OCTAL_LITERAL:
    case FLOAT_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case 25:
    case 38:
    case 39:
    case 49:
    case 50:
    case 56:
      Expression();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 26:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_6;
        }
        jj_consume_token(26);
        Expression();
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(27);
  }

  final public void Expression() throws ParseException {
    Or();
  }

  final public void Or() throws ParseException {
          ASTBinary jjtn001 = new ASTBinary(JJTBINARY);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      And();
      label_7:
      while (true) {
        if (jj_2_5(2)) {
          ;
        } else {
          break label_7;
        }
        jj_consume_token(41);
        And();
      }
                  jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                  jjtc001 = false;
                  jjtn001.addOp(ASTBinary.OR); jjtn001.setLine(jj_input_stream.getEndLine());
    } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
    }
  }

  final public void And() throws ParseException {
          ASTBinary jjtn001 = new ASTBinary(JJTBINARY);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      Relational();
      label_8:
      while (true) {
        if (jj_2_6(2)) {
          ;
        } else {
          break label_8;
        }
        jj_consume_token(42);
        Relational();
      }
                  jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                  jjtc001 = false;
                  jjtn001.addOp(ASTBinary.AND); jjtn001.setLine(jj_input_stream.getEndLine());
    } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
    }
  }

  final public void Relational() throws ParseException {
          ASTBinary jjtn001 = new ASTBinary(JJTBINARY);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      Sub();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
        if (jj_2_7(2)) {
          jj_consume_token(43);
                                      jjtn001.addOp(ASTBinary.LE); jjtn001.setLine(jj_input_stream.getEndLine());
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 44:
            jj_consume_token(44);
                         jjtn001.addOp(ASTBinary.GE); jjtn001.setLine(jj_input_stream.getEndLine());
            break;
          case 45:
            jj_consume_token(45);
                         jjtn001.addOp(ASTBinary.LT); jjtn001.setLine(jj_input_stream.getEndLine());
            break;
          case 46:
            jj_consume_token(46);
                         jjtn001.addOp(ASTBinary.GT); jjtn001.setLine(jj_input_stream.getEndLine());
            break;
          case 47:
            jj_consume_token(47);
                         jjtn001.addOp(ASTBinary.EQ); jjtn001.setLine(jj_input_stream.getEndLine());
            break;
          case 48:
            jj_consume_token(48);
                         jjtn001.addOp(ASTBinary.NE); jjtn001.setLine(jj_input_stream.getEndLine());
            break;
          default:
            jj_la1[12] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        Sub();
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
    } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
    }
  }

  final public void Sub() throws ParseException {
          ASTBinary jjtn001 = new ASTBinary(JJTBINARY);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      Mod();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 49:
        case 50:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_9;
        }
        if (jj_2_8(2)) {
          jj_consume_token(49);
                                           jjtn001.addOp(ASTBinary.ADD);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 50:
            jj_consume_token(50);
                              jjtn001.addOp(ASTBinary.SUB);
            break;
          default:
            jj_la1[15] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        Mod();
      }
                  jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                  jjtc001 = false;
                  jjtn001.setLine(jj_input_stream.getEndLine());
    } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
    }
  }

  final public void Mod() throws ParseException {
          ASTBinary jjtn001 = new ASTBinary(JJTBINARY);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      BitOp();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 51:
        case 52:
        case 53:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_10;
        }
        if (jj_2_9(2)) {
          jj_consume_token(51);
                                             jjtn001.addOp(ASTBinary.MOD);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 52:
            jj_consume_token(52);
                        jjtn001.addOp(ASTBinary.DIV);
            break;
          case 53:
            jj_consume_token(53);
                        jjtn001.addOp(ASTBinary.MUL);
            break;
          default:
            jj_la1[17] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        BitOp();
      }
                  jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                  jjtc001 = false;
                  jjtn001.setLine(jj_input_stream.getEndLine());
    } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
    }
  }

  final public void BitOp() throws ParseException {
          ASTBinary jjtn001 = new ASTBinary(JJTBINARY);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      Unary();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 54:
        case 55:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_11;
        }
        if (jj_2_10(2)) {
          jj_consume_token(54);
                                             jjtn001.addOp(ASTBinary.BITOR);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 55:
            jj_consume_token(55);
                        jjtn001.addOp(ASTBinary.BITAND);
            break;
          default:
            jj_la1[19] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        Unary();
      }
                  jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                  jjtc001 = false;
                  jjtn001.setLine(jj_input_stream.getEndLine());
    } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
    }
  }

  final public void Unary() throws ParseException {
    int op = 0;
          ASTUnary jjtn001 = new ASTUnary(JJTUNARY);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 49:
      case 50:
      case 56:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 49:
          jj_consume_token(49);
                op = ASTUnary.PLUS;
          break;
        case 50:
          jj_consume_token(50);
                        op = ASTUnary.MINUS;
          break;
        case 56:
          jj_consume_token(56);
                        op = ASTUnary.NOT;
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      Access();
                      jjtree.closeNodeScope(jjtn001,  op > 0);
                      jjtc001 = false;
                      jjtn001.setOp(op); jjtn001.setLine(jj_input_stream.getEndLine());
    } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  op > 0);
          }
    }
  }

  final public void Field() throws ParseException {
 /*@bgen(jjtree) Field */
        ASTField jjtn000 = new ASTField(JJTFIELD);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.setName(t.image); jjtn000.setLine(jj_input_stream.getEndLine());
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Access() throws ParseException {
          ASTAccess jjtn001 = new ASTAccess(JJTACCESS);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      Primary();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 40:
        case 57:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_12;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 57:
          Index();
          break;
        case 40:
          jj_consume_token(40);
          if (jj_2_11(2)) {
            Method();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IDENTIFIER:
              Field();
              break;
            default:
              jj_la1[23] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
    }
  }

  final public void Index() throws ParseException {
 /*@bgen(jjtree) Index */
  ASTIndex jjtn000 = new ASTIndex(JJTINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(57);
      Expression();
      jj_consume_token(58);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Primary() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 39:
      Exec();
      break;
    default:
      jj_la1[25] = jj_gen;
      if (jj_2_12(2)) {
        GlobalCall();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          Type();
          break;
        case NEW:
          Construct();
          break;
        case 38:
          Var();
          break;
        case STRING_LITERAL:
          String();
          break;
        case INTEGER_LITERAL:
        case HEX_LITERAL:
        case OCTAL_LITERAL:
        case FLOAT_LITERAL:
          Number();
          break;
        case TRUE:
        case FALSE:
          Boolean();
          break;
        case NULL:
          Null();
          break;
        case 25:
          jj_consume_token(25);
          Expression();
          jj_consume_token(27);
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void Construct() throws ParseException {
 /*@bgen(jjtree) Construct */
  ASTConstruct jjtn000 = new ASTConstruct(JJTCONSTRUCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NEW);
      Type();
      ParamList();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Number() throws ParseException {
 /*@bgen(jjtree) Number */
        ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FLOAT_LITERAL:
        t = jj_consume_token(FLOAT_LITERAL);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setValue(Double.valueOf(t.image));
        break;
      case INTEGER_LITERAL:
        t = jj_consume_token(INTEGER_LITERAL);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setValue(Integer.valueOf(t.image));
        break;
      case OCTAL_LITERAL:
        t = jj_consume_token(OCTAL_LITERAL);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setValue(Integer.valueOf(t.image, 8));
        break;
      case HEX_LITERAL:
        t = jj_consume_token(HEX_LITERAL);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setValue(Integer.valueOf(t.image.substring(2, t.image.length()), 16));
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void String() throws ParseException {
 /*@bgen(jjtree) String */
        ASTString jjtn000 = new ASTString(JJTSTRING);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(STRING_LITERAL);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                               jjtn000.setText(t.image.substring(1, t.image.length() - 1)); jjtn000.setLine(jj_input_stream.getEndLine());
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Boolean() throws ParseException {
 /*@bgen(jjtree) Boolean */
        ASTBoolean jjtn000 = new ASTBoolean(JJTBOOLEAN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        t = jj_consume_token(TRUE);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     jjtn000.setValue(Boolean.TRUE);
        break;
      case FALSE:
        t = jj_consume_token(FALSE);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        jjtn000.setValue(Boolean.FALSE);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Null() throws ParseException {
 /*@bgen(jjtree) Null */
        ASTNull jjtn000 = new ASTNull(JJTNULL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NULL);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Try() throws ParseException {
 /*@bgen(jjtree) Try */
  ASTTry jjtn000 = new ASTTry(JJTTRY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(59);
      Block();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 60:
        label_13:
        while (true) {
          Catch();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 60:
            ;
            break;
          default:
            jj_la1[29] = jj_gen;
            break label_13;
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 61:
          Finally();
          break;
        default:
          jj_la1[30] = jj_gen;
          ;
        }
        break;
      case 61:
        Finally();
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(28);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Catch() throws ParseException {
 /*@bgen(jjtree) Catch */
  ASTCatch jjtn000 = new ASTCatch(JJTCATCH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(60);
      jj_consume_token(25);
      Type();
      Var();
      jj_consume_token(27);
      Block();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Finally() throws ParseException {
 /*@bgen(jjtree) Finally */
  ASTFinally jjtn000 = new ASTFinally(JJTFINALLY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(61);
      Block();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Throw() throws ParseException {
 /*@bgen(jjtree) Throw */
  ASTThrow jjtn000 = new ASTThrow(JJTTHROW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(62);
      Expression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_3R_65() {
    if (jj_3R_71()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_91()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(33)) return true;
    if (jj_scan_token(25)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(56)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(50)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    }
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(49)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(32)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(55)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(31)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(51)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(53)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_72()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(52)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(30)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(50)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(49)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(29)) return true;
    if (jj_scan_token(25)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_50()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_66()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(24)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(48)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_46()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_56()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(46)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(45)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(42)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(44)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(43)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_14()) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_34()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(41)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_19()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(62)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(61)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(60)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(25)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(40)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    if (jj_3R_53()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_53()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(59)) return true;
    if (jj_3R_47()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(40)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    }
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(HEX_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(39)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(OCTAL_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(FLOAT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(38)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(25)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(37)) return true;
    if (jj_scan_token(25)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(40)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(36)) return true;
    if (jj_scan_token(25)) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(57)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_52()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[32];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xe31ff800,0xe31ff800,0xe1000000,0x800000,0x4000000,0x0,0x0,0x0,0xe31ff800,0x21ff800,0x4000000,0x21ff800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x21ff800,0x78000,0x3000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x490600f3,0x490600f3,0x48000033,0x0,0x0,0x40,0x4,0x8,0x490600f3,0x10600c0,0x0,0x10600c0,0x1f000,0x1f800,0x60000,0x40000,0x380000,0x300000,0xc00000,0x800000,0x1060000,0x1060000,0x2000100,0x0,0x2000100,0x80,0x40,0x0,0x0,0x10000000,0x20000000,0x30000000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[12];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[63];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 32; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 63; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 12; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
