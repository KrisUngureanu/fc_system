package com.cifs.or2.kernel;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.Serializable;
import java.util.List;
import java.util.Map;
import java.util.Stack;

import kz.tamur.or3ee.common.UserSession;
import kz.tamur.util.Base64;
import kz.tamur.util.Funcs;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;

/**
 * com/cifs/or2/kernel/KrnObject.java . Generated by the IDL-to-Java compiler
 * (portable), version "3.2" from ./src/com/cifs/or2/idl/kernel.idl 27 Август
 * 2009 г. 4:40:10 GMT
 */

@SuppressWarnings("serial")
public final class KrnObject implements Serializable {
	
	transient private static ThreadLocal<KrnObjectOperations> operations =
			new ThreadLocal<KrnObjectOperations>();
    transient private static Log log = LogFactory.getLog((UserSession.SERVER_ID != null ? (UserSession.SERVER_ID + ".") : "") + KrnObject.class.getName());
	
	public long id = (long) 0;
	public String uid = null;
	public long classId = (long) 0;

	public KrnObject() {
	} // ctor

	public KrnObject(long _id, String _uid, long _classId) {
		id = _id;
		uid = _uid;
		classId = _classId;
	} // ctor
	/**
	 * Возвращает ссылку на данный объект
	 * @return текущий объект
	 */
    public KrnObject getKrnObject() {
        return this;
    }
    /**
     * Возвращает id объекта<br><br>
     * Пример: $var = $obj.getId()
     * @return id объекта
     */
    public long getId() {
    	return id;
    }
    /**
     * Возвращает uid объекта<br><br>
     * Пример: $var = $obj.getUid()
     * @return uid объекта
     */
    public String getUID() {
    	return uid;
    }
    //nazerke
    /**
     * Возвращает id класса
     * @return id класса
     */
    public long getClassId() {
        return classId;
    }
    
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj instanceof KrnObject)
			return id == ((KrnObject)obj).id;
		return false;
	}

	@Override
	public int hashCode() {
		return Long.valueOf(id).hashCode();
	}

	@Override
	public String toString() {
		return "KrnObject(" + id + "," + uid + "," + classId + ")";
	}
	/**
	 * Установить операции
	 * @param operations операции
	 */
	public static void setOperations(KrnObjectOperations operations) {
		KrnObject.operations.set(operations);
	}
	/**
	 * Возвращает операции
	 * @return операции
	 */
	public static KrnObjectOperations getOperations() {
		return KrnObject.operations.get();
	}
	/**
	 * Удаляет операции
	 */
	public static void removeOperations() {
		KrnObject.operations.remove();
	}
	/**
	 * Возвращает значение атрибута, указанного в пути
				&lt;Path&gt;.
				В случае, если путь указывает на множественный атрибут, метод
				возвращает последнее значение множества атрибутов.
	 * @param path путь к атрибуту
	 * @return значение атрибута
	 * @throws KrnException
	 */
    public Object getAttr(String path) throws KrnException {
    	return getAttr(path, (KrnObject) null);
    }
    /**
     * Возвращает значение атрибута с мультиязычным свойством
     * @param path путь к мультиязычному атрибуту
     * @param lang язык (объект класса Language)
     * @return значение атрибута
     * @throws KrnException
     */
    public Object getAttr(String path, KrnObject lang) throws KrnException {
    	KrnObjectOperations ops = operations.get();
    	return ops.getAttr(this, path, lang, ops.getCurrentTransactionId());
    }
    /**
     * Возвращает значение атрибута    
     * @param path путь к атрибуту
     * @param trId
     * @return значение атрибута
     * @throws Exception
     */
    public Object getAttr(String path, Number trId) throws Exception {
    	KrnObjectOperations ops = operations.get();
    	return ops.getAttr(this, path, null, trId.longValue());
    }
    /**
     * Возвращает значение атрибута с мультиязычным свойством
     * @param path путь к атрибуту
     * @param lang язык(объект класса Language)
     * @param trId
     * @return значение атрибута
     * @throws Exception
     */
    public Object getAttr(String path, KrnObject lang, Number trId) throws Exception {
    	KrnObjectOperations ops = operations.get();
    	return ops.getAttr(this, path, lang, trId.longValue());
    }
    /**
     * Возвращает значение атрибута в кодировке base64
     * @param path путь к атрибуту
     * @return значение атрибута в base64
     * @throws Exception
     */
    public Object getBase64Attr(String path) throws Exception {
    	return getBase64Attr(path, (KrnObject)null);
    }
    /**
     * Возвращает значение атрибута в кодировке base64
     * @param path путь к атрибуту
     * @param trId
     * @return значение атрибута в base64
     * @throws Exception
     */
    public Object getBase64Attr(String path, Number trId) throws Exception {
    	Object o = getAttr(path, trId);
    	byte[] bs = null;
    	if (o instanceof File) {
    		bs = Funcs.read((File)o);
    	} else if (o instanceof byte[]) {
    		bs = (byte[])o;
    	}
		if (bs != null && bs.length > 0) {
			return Base64.encodeBytes(bs).replaceAll("\n", "");
		}
        return null;
    }
    /**
     * Возвращает значение атрибута с мультиязычным свойством в кодировке base64
     * @param path путь к атрибуту
     * @param lang язык(объект класса Language)
     * @return значение атрибута в base64
     * @throws Exception
     */
    public Object getBase64Attr(String path, KrnObject lang) throws Exception {
        try {
        	Object o = getAttr(path, lang);
        	byte[] bs = null;
        	if (o instanceof File) {
        		bs = Funcs.read((File)o);
        	} else if (o instanceof byte[]) {
        		bs = (byte[])o;
        	}
    		if (bs != null && bs.length > 0) {
    			return Base64.encodeBytes(bs).replaceAll("\n", "");
    		}
        } catch (Exception e) {
            log.error("<OBJECT>.getAttr(\"" + path + "\")");
            log.error(e, e);
        }
        return null;
    }
    /**
     * Возвращает атрибут в формате xml
     * @param path путь к утрибуту
     * @return xml элемент
     * @throws Exception
     */
    public Element getXmlFromAttr(String path) throws Exception {
        return getXmlFromAttr(path, null,null);   
    }
    /**
     * Возвращает атрибут с мультиязычным свойством в формате xml
     * @param path путь к атрибуту
     * @param lang язык (объект класса Language)
     * @return xml элемент
     * @throws Exception
     */
    public Element getXmlFromAttr(String path, KrnObject lang) throws Exception {
        return getXmlFromAttr(path, lang,null);
    }
    /**
     * Возвращает атрибут с мультиязычным свойством в указанной кодировке в формате xml,
     * если кодировка не указана, по умолчанию UTF-8
     * @param path путь к атрибуту
     * @param lang язык (объект класса Language)
     * @param encoding кодировка
     * @return xml элемент
     * @throws Exception
     */
    public Element getXmlFromAttr(String path, KrnObject lang, String encoding) throws Exception {
		Element e = null;
		if (encoding == null || encoding.equals(""))
			encoding = "UTF-8";
		byte[] buf = (byte[])getAttr(path, lang);
		if (buf == null || buf.length == 0)
			return null;
		SAXBuilder builder = new SAXBuilder();
		try {
			Document doc = builder.build(new ByteArrayInputStream(buf),
					encoding);
			if (doc != null)
				e = doc.getRootElement();
			else
				e = null;
		} catch (Exception ex) {
            log.error(ex, ex);
		}
		return e;
    }
    /**
     * Вписывает атрибут в объект
     * @param path путь к атрибуту
     * @param value объект
     * @throws KrnException
     */
    public void setAttr(String path, Object value) throws KrnException {
    	setAttr(path, value, (KrnObject)null);
    }
    /**
     * Вписывает атрибут в объект
     * @param path путь к атрибуту
     * @param value объект
     * @param trId
     * @throws KrnException
     */
    public void setAttr(String path, Object value, Number trId) throws KrnException {
    	setAttr(path, value, (KrnObject)null, trId);
    }
    /**
     * Вписывает атрибут в объект на указанном
 		в Language языке
     * @param path путь к атрибуту
     * @param value объект
     * @param lang язык(объект класса Language)
     * @throws KrnException
     */
    public void setAttr(String path, Object value, KrnObject lang) throws KrnException {
    	KrnObjectOperations ops = operations.get();
    	ops.setAttr(this, path, value, lang, ops.getCurrentTransactionId());
    }
    /**
     * Вписывает атрибут в объект на указанном
 		в Language языке
     * @param path путь к атрибуту
     * @param value объект
     * @param lang язык(объект класса Language)
     * @param trId
     * @throws KrnException
     */
    public void setAttr(String path, Object value, KrnObject lang, Number trId) throws KrnException {
    	KrnObjectOperations ops = operations.get();
    	ops.setAttr(this, path, value, lang, trId.longValue());
    }
    /**
     * Вписывает xml в атрибут
     * @param path руть к атрибуту
     * @param xml
     * @throws Exception
     */
    public void setXmlToAttr(String path,Element xml) throws Exception {
        setXmlToAttr(path, xml, null);    
    }
    /**
     * Вписывает xml в атрибут
     * @param path путь к атрибуту
     * @param xml 
     * @param lang язык(объект класса Language)
     * @throws Exception
     */
    public void setXmlToAttr(String path, Element xml, KrnObject lang) throws Exception {
        try{
            ByteArrayOutputStream os = new ByteArrayOutputStream();
            XMLOutputter out = new XMLOutputter();
            out.getFormat().setEncoding("UTF-8");
            out.output(xml, os);
            os.close();
            byte[] data= os.toByteArray();
            setAttr(path, data, lang);
        } catch (Exception e) {
            log.info("<OBJECT>.setAttr(\"" + path + "\", <VALUE>)");
            throw e;
        }
    }
    /**
     * Удаляет атрибут объекта
     * @param path путь к атрибуту
     * @throws KrnException
     */
    public void deleteAttr(String path) throws KrnException {
    	deleteAttr(path, false);
    }
    /**
     * Удаляет атрибут объекта
     * @param path путь к атрибуту
     * @param trId значение транзакции
     * @throws KrnException
     */
    public void deleteAttr(String path, Number trId) throws KrnException {
    	KrnObjectOperations ops = operations.get();
    	ops.deleteAttr(this, path, null, false, trId.longValue());
    }
    /**
     * Удаляет атрибут объекта и если тип 
		атрибута объектный, удаляет и сам объект<br><br>
		Пример: $person.deleteAttr(“Персонал.приказ о перемещении”, true)
	               $person.deleteAttr(“Персонал.приказ о перемещении[]”, true)
     * @param path путь к атрибуту
     * @param cascade true - если тип объектный, иначе false
     * @throws KrnException
     */
    public void deleteAttr(String path, boolean cascade) throws KrnException {
    	KrnObjectOperations ops = operations.get();
    	ops.deleteAttr(this, path, null, cascade, ops.getCurrentTransactionId());
    }
    /**
     * Удаляет атрибут объекта по указанному 
		номеру в index. Применяется только для множественных типов атрибутов массивов<br><br>
		Пример: $person.deleteAttr(“Персонал.приказ о перемещении”, 5)
     * @param path путь к атрибуту
     * @param index индекс
     * @throws Exception
     */
    public void deleteAttr(String path, int index) throws Exception {
    	KrnObjectOperations ops = operations.get();
    	ops.deleteAttr(this, path, null, index, ops.getCurrentTransactionId());
    }
    /**
     * Удаляет атрибут объекта по указанному номеру в index. Применяется только для множественных типов атрибутов – наборов. Пример: $person.deleteAttr(“Персонал.приказ о перемещении”, 5)
     * @param path путь к атрибуту
     * @param index индекс
     * @param trId значение транзакции
     * @throws Exception
     */
    public void deleteAttr(String path, Number index, Number trId) throws Exception {
    	KrnObjectOperations ops = operations.get();
    	ops.deleteAttr(this, path, null, index.intValue(), trId.longValue());
    }
    /**
     * Удаляет атрибут объекта по указанному  в
value значению. Применяется только для множественных типов атрибутов – наборов.<br><br>
	Пример: $person.deleteAttr(“Персонал.приказ о перемещении”, $prikaz)
     * @param path путь к атрибуту
     * @param value значение
     * @throws Exception
     */
    public void deleteAttr(String path, Object value) throws Exception {
    	KrnObjectOperations ops = operations.get();
    	ops.deleteAttr(this, path, value, ops.getCurrentTransactionId());
    }
    /**
     * Удаляет атрибут объекта по указанному в value значению. Применяется только для множественных типов атрибутов – наборов. Пример: $person.deleteAttr(“Персонал.приказ о перемещении”, $prikaz)
     * @param path путь к атрибуту
     * @param value значение
     * @param trId значение транзакции
     * @throws Exception
     */
    public void deleteAttr(String path, Object value, Number trId) throws Exception {
    	KrnObjectOperations ops = operations.get();
    	ops.deleteAttr(this, path, value, trId.longValue());
    }
    /**
     * Уничтожить объект из БД<br><br>
     * Пример: $person.delete()
     * @throws KrnException
     */
    public void delete() throws KrnException {
    	KrnObjectOperations ops = operations.get();
    	ops.delete(this, false, ops.getCurrentTransactionId());
    }
    
    /**
     * Уничтожить объект из БД в указанной транзакции<br><br>
     * Пример: $person.deleteTr(1222)
     * @throws KrnException
     */
    public void deleteTr(Number trId) throws KrnException {
    	KrnObjectOperations ops = operations.get();
    	ops.delete(this, false, trId.longValue());
    }

    /**
     * Сравнивает атрибуты объектов. Возвращает TRUE или FALSE.<br><br>
     * Пример:
	if($obj1.like($obj2)) { 
	$Systems.println(“Атрибуты объектов равны”)
	}
     * @param obj
     * @return
     * @throws KrnException
     */
    public boolean like(KrnObject obj) throws KrnException {
    	KrnObjectOperations ops = operations.get();
    	return ops.like(this, obj, null, ops.getCurrentTransactionId());
    }

    /**
     * Сравнивает атрибуты объектов. Возвращает TRUE или FALSE.<br><br>
     * Пример:
	if($obj1.like($obj2, $lang)) { 
	$Systems.println(“Атрибуты объектов равны”)
	}
     * @param obj
     * @param lang
     * @return
     * @throws KrnException
     */
    public boolean like(KrnObject obj, KrnObject lang) throws KrnException {
    	KrnObjectOperations ops = operations.get();
    	return ops.like(this, obj, lang, ops.getCurrentTransactionId());
    }
/**
     * Проверяет состояние блокировки объекта
			указанным в
			service процессом. Возвращает TRUE или FALSE.<br><br>
		Пример:
		if($obj1.isLock($Objects.getObject(“32987.12876”)) {
			$Systems.println(“Объект заблокирован процессом “Прием на работу””)
			}
     * @param service процесс
     * @return
     * @throws KrnException
     */
    public boolean isLock(KrnObject service) throws KrnException {
    	return operations.get().isLock(this, service);
    }
    /**
     * Устанавливает состояние блокировки объекта текущим процессом
     * @throws KrnException
     */
    public void lock() throws KrnException {
    	operations.get().lock(this);
    }
    /**
     * Устанавливает состояние блокировки объекта указанным процессом
     * @param locker процесс
     * @throws KrnException
     */
    public void lock(KrnObject locker) throws KrnException {
    	operations.get().lock(this, locker);
    }
    /**
     * Проверяет блокировку указанным процессом
     * @param locker процесс
     * @return true - если заблокирован данным процессом, иначе false
     * @throws KrnException
     */
    public boolean isLocked(KrnObject locker) throws KrnException {
    	return operations.get().isLocked(this, locker);
    }
    
    public List<KrnObject> getConflictLocker() {
    	return operations.get().getConflictLocker(this);
    }
    /**
     * Возвращает объектный код потока
			указанного
			процесса, заблокировавшего объект. Если блокировка отсутствует – возвращает
			NULL<br><br>

		Пример:
		$obj = $obj1.getLocker($Objects.getObject(“32987.12876”))
     * @param service процесс
     * @return
     * @throws KrnException
     */
    public KrnObject getLocker(KrnObject service) throws KrnException {
    	return operations.get().getLocker(this, service);
    }
    /**
     * Возвращает имя процесса заблокировавшего объект
     * @return имя процесса
     * @throws KrnException
     */
    public String getLocker() throws KrnException {
    	return operations.get().getLocker(this);
    }
    /**
     * Cнимает блокировку объекта текущим потоком процесса
     * @throws KrnException
     */
    public void unlock() throws KrnException {
    	operations.get().unlock(this);
    }
    /**
     * Исполение вызываемого метода на клиенте
     * @param _this процесс
     * @param methodName имя метода
     * @param args список аргументов
     * @param callStack стэк вызовов
     * @return процесс
     * @throws Throwable
     */
    public Object exec(KrnObject _this, String methodName, List<Object> args, Stack<String> callStack) throws Throwable {
    	return operations.get().exec(this, _this, methodName, args, callStack);
    }

    public boolean isDeleted() throws KrnException {
    	return operations.get().isDeleted(this);
    }
    
    public boolean isDel(long trId) throws KrnException{
    	KrnObjectOperations ops = operations.get();
    	return ops.isDel(this, trId);
    }
    
    public boolean isDel() throws KrnException{
    	KrnObjectOperations ops = operations.get();
    	return ops.isDel(this, ops.getCurrentTransactionId());
    }

	public KrnClass getCls() throws Exception {
    	return operations.get().getCls(this);
	}
	/**
	 * Исполение вызываемого метода на сервере
	 * @param _this
	 * @param methodName
	 * @param args
	 * @param callStack
	 * @return
	 * @throws Throwable
	 */
    public Object sexec(KrnObject _this, String methodName, List<Object> args, Stack<String> callStack) throws Throwable {
    	return operations.get().sexec(this, _this, methodName, args, callStack);
    }
    /**
     * Возвращает атрибут в двоичном виде
     * @param path путь к атрибуту
     * @return строка
     * @throws Exception
     */
    public String getBlobAttr(String path) throws Exception {
    	return getBlobAttr(path, null);
    }
    /**
     * Возвращает атрибут на указанном
 		в Language языке в двоичном виде
     * @param path путь к атрибуту
     * @param lang язык
     * @return строка
     * @throws Exception
     */
    public String getBlobAttr(String path, KrnObject lang) throws Exception {
    	String res = null;
        try {
        	Object o = getAttr(path, lang);
        	byte[] bs = null;
        	if (o instanceof File) {
        		bs = Funcs.read((File)o);
        	} else if (o instanceof byte[]) {
        		bs = (byte[])o;
        	} else if (o instanceof String) {
        		res = (String)o;
        	}
    		if (bs != null && bs.length > 0) {
    			res = new String(bs, "UTF-8");
    		}
        } catch (Exception e) {
            log.error("<OBJECT>.getAttr(\"" + path + "\")");
            log.error(e, e);
        }
        return res;
    }
    /**
     * Установить атрибут в двоичном виде в указанный объект
     * @param path путь к атрибуту
     * @param value объект
     * @throws KrnException
     */
    public void setBlobAttr(String path, Object value) throws KrnException {
    	setBlobAttr(path, value, null);
    }
    /**
     * Установить атрибут в двоичном виде в указанный объект
     * @param path путь к атрибуту
     * @param value объект
     * @param lang язык
     * @throws KrnException
     */
    public void setBlobAttr(String path, Object value, KrnObject lang) throws KrnException {
    	Object v = null;
    	try {
	    	if (value instanceof String) {
	    		v = ((String) value).getBytes("UTF-8");
	    	} else {
	    		v = value;
	    	}
    	} catch (Exception e) {
            log.error(e, e);
    	}
    	setAttr(path, v, lang);
    }
    /**
     * Установить атрибут в кодировке base64 в объект
     * @param path путь к атрибуту
     * @param value объект
     * @throws Exception
     */
    public void setBase64Attr(String path, Object value) throws Exception {
    	setBase64Attr(path, value, null);
    }
    /**
     * Установить атрибут в base64 кодировке в объект 
     * @param path путь к атрибуту
     * @param value объект
     * @param charSet кодировка
     * @throws Exception
     */
    public void setBase64Attr(String path, Object value, String charSet) throws Exception {
    	value = Base64.decode((String)value);
    	KrnObjectOperations ops = operations.get();
    	ops.setAttr(this, path, value, null, ops.getCurrentTransactionId());
    }

    public void setStringToBlobAttr(String path, String value) throws Exception {
        setStringToBlobAttr(path, value, null);
    }
    
    public void setStringToBlobAttr(String path, String value, KrnObject lang) throws Exception {
    	KrnObjectOperations ops = operations.get();
        byte[] data= value.getBytes("UTF-8");
    	ops.setAttr(this, path, data, lang, ops.getCurrentTransactionId());
    }

    public void delete(Number deleteRefs) throws Exception {
    	KrnObjectOperations ops = operations.get();
        boolean delRefs = (deleteRefs != null && deleteRefs.longValue() == 1); 
        ops.delete(this, delRefs, ops.getCurrentTransactionId());
    }

    public List<String> getProcessLocker() {
    	return operations.get().getProcessLocker(this);
    }
    /**
     * Положит объект в Cache чтобы выполнить его сохранение командой save
     * @return объект KrnObject
     * @throws KrnException
     */
    public boolean beforeSave() throws KrnException {
    	return operations.get().beforeSave(this);
    }
    
    /**
     * Сохранить объект
     * @return объект KrnObject
     * @throws KrnException
     */
    public KrnObject save() throws KrnException {
    	return operations.get().save(this);
    }
    
    public boolean instanceOf(KrnClass otherCls) throws KrnException {
    	if (otherCls == null) {
    		return false;
    	} else {
	    	if (classId == otherCls.id) {
	    		return true;
	    	} else {
	    		return recursiveCheck(classId, otherCls);
	    	}
    	}
    }
    
    private boolean recursiveCheck(long classId, KrnClass otherCls) throws KrnException {
    	KrnClass cls = operations.get().getClassById(classId);
    	long parentId = cls.parentId;
    	if (parentId == -1) {
    		return false;
    	} else {
    		if (parentId == otherCls.id) {
    			return true;
    		} else {
    			return recursiveCheck(parentId, otherCls);
    		}
    	}
    }
    /**
     * Вставка результата фильтра в множественный атрибут
     * @return объект KrnObject
     * @throws KrnException
     */
    public long filterToAttr(KrnObject fobj,String path) throws KrnException {
    	return filterToAttr(fobj, path, null, 0);
    }
    /**
     * Вставка результата фильтра в множественный атрибут
     * @return объект KrnObject
     * @throws KrnException
     */
    public long filterToAttr(KrnObject fobj,String path,Map<String,Object> params,long trId) throws KrnException {
    	return operations.get().filterToAttr(this, fobj, path, params, trId);
    }
}