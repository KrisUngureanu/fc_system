/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. OrLang.jj */
/*@egen*/options
{
	           
	             
	                              
	                       
    STATIC=false;
    UNICODE_INPUT=true;
}

PARSER_BEGIN(Parser)
package kz.tamur.lang.parser;

import java.io.*;
import java.util.*;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTParserState jjtree = new JJTParserState();

/*@egen*/

}

PARSER_END(Parser)

/* White spaces */

SKIP : {" " | "\r" | "\n" | "\f" | "\t"}

/* COMMENTS */

MORE :
{
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "//"(~["\n","\r"])*("\n"|"\r"|"\r\n")?>
}

// Reserved words
TOKEN : {
	<IN : "in">
	| <NEW : "new">
	| <TRUE : "true">
	| <FALSE : "false">
	| <NULL : "null">
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL: "0" | (["1"-"9"] (["0"-"9"])*) >
|
  < HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOAT_LITERAL: (["0"-"9"])+ ("." (["0"-"9"])+)>
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

TOKEN : {
  <IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
  | <#DIGIT : ["0"-"9"]>
  | <#LETTER : ["_","a"-"z","A"-"Z","\u0410"-"\u044f"]>
}

ASTStart Start()        :
{/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Start */
        try {
/*@egen*/
	(LOOKAHEAD(Type() Var()) DeclDir() | Directive() | Expression())*
	<EOF>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Directive() :
{
}
{
	SetDir()
	| IfDir()
	| ForeachDir()
	| WhileDir()
	| ReturnDir()
	| BreakDir()
	| ContinueDir()
	| Try()
	| Throw()
	| FuncDir()
}

void DeclDir()       :
{/*@bgen(jjtree) Decl */
  ASTDecl jjtn000 = new ASTDecl(JJTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Decl */
        try {
/*@egen*/
	Type() Var() ("=" Expression())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void FuncDir()       :
{/*@bgen(jjtree) Func */
        ASTFunc jjtn000 = new ASTFunc(JJTFUNC);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Func */
        try {
/*@egen*/
	"#function"
	t = <IDENTIFIER>
	{ jjtn000.setName(t.image); jjtn000.setLine(jj_input_stream.getEndLine()); }
	"("/*@bgen(jjtree) #FuncArgs(> 0) */
            {
              ASTFuncArgs jjtn001 = new ASTFuncArgs(JJTFUNCARGS);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ ((Var() ("," Var())*)?)/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 0);
              }
            }
/*@egen*/               ")"
	Block()
	"#end"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SetDir()      :
{/*@bgen(jjtree) Set */
  ASTSet jjtn000 = new ASTSet(JJTSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Set */
    try {
/*@egen*/
    { jjtn000.setLine(jj_input_stream.getEndLine()); }
	"#set" "(" Var() "=" Expression() ")"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ReturnDir()         :
{/*@bgen(jjtree) Return */
  ASTReturn jjtn000 = new ASTReturn(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Return */
    try {
/*@egen*/
    { jjtn000.setLine(jj_input_stream.getEndLine()); }
	"#return" [LOOKAHEAD(2) Expression() ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void BreakDir()        :
{/*@bgen(jjtree) Break */
  ASTBreak jjtn000 = new ASTBreak(JJTBREAK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Break */
    try {
/*@egen*/
    { jjtn000.setLine(jj_input_stream.getEndLine()); }
	"#break"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ContinueDir()           :
{/*@bgen(jjtree) Continue */
  ASTContinue jjtn000 = new ASTContinue(JJTCONTINUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Continue */
    try {
/*@egen*/
    { jjtn000.setLine(jj_input_stream.getEndLine()); }
	"#continue"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void IfDir()     :
{/*@bgen(jjtree) If */
        ASTIf jjtn000 = new ASTIf(JJTIF);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	ASTBlock b;
	ASTIf parent;
}
{/*@bgen(jjtree) If */
        try {
/*@egen*/
	{ parent = jjtn000; jjtn000.setLine(jj_input_stream.getEndLine()); }
	"#if" "(" Expression() ")"
	b = Block() { jjtn000.setBlock(b); }
	(/*@bgen(jjtree) If */
         {
           ASTIf jjtn001 = new ASTIf(JJTIF);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
         }
         try {
/*@egen*/("#elseif" "(" Expression() ")" b = Block()/*@bgen(jjtree)*/
                                                     {
                                                       jjtree.closeNodeScope(jjtn001, true);
                                                       jjtc001 = false;
                                                     }
/*@egen*/ { jjtn001.setBlock(b); parent.addElif(jjtn001); })/*@bgen(jjtree)*/
         } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             throw (RuntimeException)jjte001;
           }
           if (jjte001 instanceof ParseException) {
             throw (ParseException)jjte001;
           }
           throw (Error)jjte001;
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
           }
         }
/*@egen*/     )*
	("#else" b = Block() { jjtn000.setElseBlock(b); })?
	"#end"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTBlock Block()        :
{/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Block */
        try {
/*@egen*/
	(LOOKAHEAD(2) Directive() | Expression())*/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                   }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ForeachDir()          :
{/*@bgen(jjtree) Foreach */
  ASTForeach jjtn000 = new ASTForeach(JJTFOREACH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Foreach */
    try {
/*@egen*/
    { jjtn000.setLine(jj_input_stream.getEndLine()); }
	"#foreach" "(" Var() <IN> Expression() ")"
	Block()
	"#end"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void WhileDir()        :
{/*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) While */
    try {
/*@egen*/
    { jjtn000.setLine(jj_input_stream.getEndLine()); }
	"#while" "(" Expression() ")"
	Block()
	"#end"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Var()      :
{/*@bgen(jjtree) Var */
        ASTVar jjtn000 = new ASTVar(JJTVAR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Var */
        try {
/*@egen*/
	"$" t = <IDENTIFIER>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.setName(t.image); jjtn000.setLine(jj_input_stream.getEndLine()); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void GlobalCall()            :
{/*@bgen(jjtree) GlobalCall */
  ASTGlobalCall jjtn000 = new ASTGlobalCall(JJTGLOBALCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) GlobalCall */
    try {
/*@egen*/
    Method()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Exec()       :
{/*@bgen(jjtree) Exec */
  ASTExec jjtn000 = new ASTExec(JJTEXEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Exec */
    try {
/*@egen*/
    { jjtn000.setLine(jj_input_stream.getEndLine()); }
	"#exec" ParamList()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Method()         :
{/*@bgen(jjtree) Method */
        ASTMethod jjtn000 = new ASTMethod(JJTMETHOD);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Method */
    try {
/*@egen*/
    t = <IDENTIFIER> { jjtn000.setName(t.image); jjtn000.setLine(jj_input_stream.getEndLine());}
    ParamList()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Type()       :
{/*@bgen(jjtree) Type */
        ASTType jjtn000 = new ASTType(JJTTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
	StringBuilder typeName = new StringBuilder();
}
{/*@bgen(jjtree) Type */
        try {
/*@egen*/
	t = <IDENTIFIER> { jjtn000.addName(t.image); }
	( LOOKAHEAD(".", {getToken(2).kind == IDENTIFIER
	                  && !getToken(3).image.equals("(")
	                  && !getToken(3).image.equals("[")})
	  "." t = <IDENTIFIER>
	  {jjtn000.addName(t.image);})*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.setLine(jj_input_stream.getEndLine()); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ParamList() :
{
}
{
	"(" (Expression() ("," Expression())*)? ")"
}

void Expression() :
{
}
{
	Or()
}

void Or() :
{
}
{/*@bgen(jjtree) #Binary(> 1) */
        {
          ASTBinary jjtn001 = new ASTBinary(JJTBINARY);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(
		And() (LOOKAHEAD(2) "||" And())*/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                  jjtc001 = false;
                }
/*@egen*/
		{ jjtn001.addOp(ASTBinary.OR); jjtn001.setLine(jj_input_stream.getEndLine());}
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/            
}

void And() :
{
}
{/*@bgen(jjtree) #Binary(> 1) */
        {
          ASTBinary jjtn001 = new ASTBinary(JJTBINARY);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(
		Relational() (LOOKAHEAD(2) "&&" Relational())*/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                  jjtc001 = false;
                }
/*@egen*/
		{ jjtn001.addOp(ASTBinary.AND); jjtn001.setLine(jj_input_stream.getEndLine());}
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/            
}

void Relational() :
{
}
{/*@bgen(jjtree) #Binary(> 1) */
        {
          ASTBinary jjtn001 = new ASTBinary(JJTBINARY);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(
        	Sub()
		((LOOKAHEAD(2) "<=" { jjtn001.addOp(ASTBinary.LE); jjtn001.setLine(jj_input_stream.getEndLine());}
		| ">=" { jjtn001.addOp(ASTBinary.GE); jjtn001.setLine(jj_input_stream.getEndLine());}
		| "<"  { jjtn001.addOp(ASTBinary.LT); jjtn001.setLine(jj_input_stream.getEndLine());}
		| ">"  { jjtn001.addOp(ASTBinary.GT); jjtn001.setLine(jj_input_stream.getEndLine());}
		| "==" { jjtn001.addOp(ASTBinary.EQ); jjtn001.setLine(jj_input_stream.getEndLine());}
		| "!=" { jjtn001.addOp(ASTBinary.NE); jjtn001.setLine(jj_input_stream.getEndLine());}
		) Sub())?
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/            
}

void Sub() :
{
}
{/*@bgen(jjtree) #Binary(> 1) */
        {
          ASTBinary jjtn001 = new ASTBinary(JJTBINARY);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(
		Mod() ((LOOKAHEAD(2) "+" { jjtn001.addOp(ASTBinary.ADD);}
		|	"-" { jjtn001.addOp(ASTBinary.SUB);}
		) Mod())*/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                  jjtc001 = false;
                }
/*@egen*/
		{ jjtn001.setLine(jj_input_stream.getEndLine());}
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/            
}

void Mod() :
{
}
{/*@bgen(jjtree) #Binary(> 1) */
        {
          ASTBinary jjtn001 = new ASTBinary(JJTBINARY);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(
		BitOp() ((LOOKAHEAD(2) "%" { jjtn001.addOp(ASTBinary.MOD);}
		| "/" { jjtn001.addOp(ASTBinary.DIV);}
		| "*" { jjtn001.addOp(ASTBinary.MUL);}
		) BitOp())*/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                  jjtc001 = false;
                }
/*@egen*/
		{ jjtn001.setLine(jj_input_stream.getEndLine());}
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/            
}

void BitOp() :
{
}
{/*@bgen(jjtree) #Binary(> 1) */
        {
          ASTBinary jjtn001 = new ASTBinary(JJTBINARY);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(
		Unary() ((LOOKAHEAD(2) "|" { jjtn001.addOp(ASTBinary.BITOR);}
		| "&" { jjtn001.addOp(ASTBinary.BITAND);}
		) Unary())*/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                  jjtc001 = false;
                }
/*@egen*/
		{ jjtn001.setLine(jj_input_stream.getEndLine()); }
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/            
	
}

void Unary() :
{
    int op = 0;
}
{/*@bgen(jjtree) #Unary( op > 0) */
        {
          ASTUnary jjtn001 = new ASTUnary(JJTUNARY);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(("+" { op = ASTUnary.PLUS; }
		| "-" { op = ASTUnary.MINUS; }
		| "!" { op = ASTUnary.NOT; }
	)? Access()/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn001,  op > 0);
                      jjtc001 = false;
                    }
/*@egen*/ { jjtn001.setOp(op); jjtn001.setLine(jj_input_stream.getEndLine()); } )/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  op > 0);
          }
        }
/*@egen*/               
}

void Field()        :
{/*@bgen(jjtree) Field */
        ASTField jjtn000 = new ASTField(JJTFIELD);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Field */
    try {
/*@egen*/
    t = <IDENTIFIER>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ { jjtn000.setName(t.image); jjtn000.setLine(jj_input_stream.getEndLine());}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Access() :
{
}
{/*@bgen(jjtree) #Access(> 1) */
        {
          ASTAccess jjtn001 = new ASTAccess(JJTACCESS);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	( Primary()
		(Index() | "." (LOOKAHEAD(2) Method() | Field()))*
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/             
}

void Index()        :
{/*@bgen(jjtree) Index */
  ASTIndex jjtn000 = new ASTIndex(JJTINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Index */
        try {
/*@egen*/
	"[" Expression() "]"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Primary() :
{
}
{
	Exec()
	| LOOKAHEAD(2) GlobalCall()
	| Type()
	| Construct()
	| Var()
	| String()
	| Number()
	| Boolean()
	| Null()
	| "(" Expression() ")"
}

void Construct()            :
{/*@bgen(jjtree) Construct */
  ASTConstruct jjtn000 = new ASTConstruct(JJTCONSTRUCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Construct */
        try {
/*@egen*/
	<NEW> Type() ParamList()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Number()         :
{/*@bgen(jjtree) Number */
        ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Number */
        try {
/*@egen*/
	t = <FLOAT_LITERAL>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.setValue(Double.valueOf(t.image)); }
	| t = <INTEGER_LITERAL>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.setValue(Integer.valueOf(t.image)); }
	| t = <OCTAL_LITERAL>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.setValue(Integer.valueOf(t.image, 8)); }
	| t = <HEX_LITERAL>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.setValue(Integer.valueOf(t.image.substring(2, t.image.length()), 16)); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void String()         :
{/*@bgen(jjtree) String */
        ASTString jjtn000 = new ASTString(JJTSTRING);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) String */
        try {
/*@egen*/
	t = <STRING_LITERAL>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ { jjtn000.setText(t.image.substring(1, t.image.length() - 1)); jjtn000.setLine(jj_input_stream.getEndLine());}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Boolean()          :
{/*@bgen(jjtree) Boolean */
        ASTBoolean jjtn000 = new ASTBoolean(JJTBOOLEAN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Boolean */
        try {
/*@egen*/
	t = <TRUE>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ { jjtn000.setValue(Boolean.TRUE); }
	| t = <FALSE>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ { jjtn000.setValue(Boolean.FALSE); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Null()       :
{/*@bgen(jjtree) Null */
        ASTNull jjtn000 = new ASTNull(JJTNULL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Null */
        try {
/*@egen*/
	t = <NULL>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Try()      :
{/*@bgen(jjtree) Try */
  ASTTry jjtn000 = new ASTTry(JJTTRY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Try */
        try {
/*@egen*/
	"#try"
	Block()
	(((Catch())+ (Finally())?) | Finally())
	"#end"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Catch()        :
{/*@bgen(jjtree) Catch */
  ASTCatch jjtn000 = new ASTCatch(JJTCATCH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Catch */
        try {
/*@egen*/
	"#catch" "(" Type() Var() ")" Block()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Finally()          :
{/*@bgen(jjtree) Finally */
  ASTFinally jjtn000 = new ASTFinally(JJTFINALLY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Finally */
        try {
/*@egen*/
	"#finally" Block()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Throw()        :
{/*@bgen(jjtree) Throw */
  ASTThrow jjtn000 = new ASTThrow(JJTTHROW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Throw */
        try {
/*@egen*/
	"#throw" Expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}
