<?xml version="1.0" encoding="UTF-8"?>
<folder name="Фунции">
	<folder name="Velocity">
		<func name="#set">Присваивает переменной значение</func>
		<func name="#if">#if()
			#else [elseif()]
			#end
		</func>
		<func name="#foreach">Метод создания цикла
			#foreach($item in $array)
			#end
			Для каждого представителя $item из массива $array выполняются
			определенные
			действия.
		</func>
		<func name="in">Обязательное слово в конструкции метода #foreach
		</func>
		<func name="#else">Возможное слово в конструкции #if</func>
		<func name="#elseif">Возможное слово в конструкции #if</func>
		<func name="#end">Обязательное слово в конструкции #if</func>
		<func name="size">Метод применяется к переменной, хранящей массив
			данных.
			Возвращает размер массива
			size()
		</func>
		<func name="equals">Метод применяется к переменной.
			Пример: $var1.equals($var2)
			Возвращает true при сравнении переменных, false - если преременные не
			сравнились
		</func>
		<func name="length">Метод применяется к текстовой переменной.
			Возвращает количество символов текстовой переменной.
			#set($var1 = $var2.length())
		</func>
		<func name="#while"></func>
		<func name="#break">#break - выходит из цикла</func>
		<func name="#continue">#contione - прерывает итерацию цикла</func>
		<func name="#return">#return - прерывает исполнение метода и возвращает
			указанное значение,
			например: #return 0
		</func>
	</folder>
	<folder name="Расширение">
		<folder name="Строки">
			<func name="toInt">toInt()
				Преобразование текстовой строки в целое число.
				Метод применяется к переменной типа Str.
				Пример: $str.toInt()
			</func>
			<func name="toFloat">toFloat("format")
				Преобразование текстовой строки в число с плавающей запятой.
				Метод применяется к переменной типа Str.
				Пример: $str.toFloat("#.###") - преобразует строку в число с тремя знаками
				после запятой
			</func>
			<func name="toDate">toDate()
				Преобразование текстовой строки в дату.
				Метод применяется к переменной типа str.
				Пример: $Strings.toDate($par, "dd-MM-yyyy") - преобразует
				строку в дату.
			</func>
			<func name="toString">toString("format")
				Преобразование даты в текстовую строку.
				Метод применяется к переменной типа date.
				Пример: $date.toString("dd-MM-yyyy") - преобразует дату в строку указанного
				формата.
				Пример полного формата: "dd-MM-yyyy:hh.mm.ss.SSS", где:
				dd - день
				MM - месяц
				yyyy - год
				hh - час
				mm - минуты
				ss - секунды
				SSS - милисекунды
			</func>
			<func name="replaceFirst">replaceFirst("Simbol_1", "Simbol_2")
				заменяет в строке первый, встретившийся символ Simbol_2 на символ Simbol_1.
				Метод строк.
				Пример:
				replaceFirst( "\,", "." ) - первая встретившаяся запятая заменяется на точку слэш
				употребляется для внесения различия между запятой-опреандом и
				запятой в тексте оператора
			</func>
			<func name="substring">substring(начать - номер символа , количество
				символов)
				нумерация символов начинается с 0
			</func>
			<func name="showMessage">Метод объекта Systems
				Пример:
				Systems.showMessage("Текст диалога предупреждения")
			</func>
			<func name="getInterfaceLang">Метод класса Interface.
				определяет текущий язык интерфейса
				Пример:
				#set($lang = $Interface.getInterfaceLang())
			</func>
			<func name="convertLongToText">#set($summa =
				$Interface.getAttr("уд::осн::Узел.документ.реш_о_выпл_го.треб_о_выпл_го.гарантия.заявка.транш_сумма"))
				#set($text = $Strings.convertLongToText($summa, 0, 0))
				#return $text

				Значения праметра род:
				0 мужской
				1 женский
				2 средний
				Значение параметра падеж:
				0 именительный
				1 родительный
				2 дательный
				3 винительный
				4 творительный
				5 предложный


				Пример:
				$text = $Strings.convertLongToText(152, 1, 3)
			</func>
		</folder>
		<folder name="Обработка XML">
			<func name="createElement">Метод создает тег XML структуры
				createElement("nameTeg")
			</func>
			<func name="setText">setText($str)</func>
			<func name="addContent">addContent($nameTeg)</func>
			<func name="getChild">getChild("nameTeg")</func>
			<func name="getText">getText()</func>
			<func name="getChildren">getChildren()</func>
			<func name="parseElement"></func>
			<func name="getAttributeValue"></func>
			<func name="getNamespace">getNamespace</func>
		</folder>
		<folder name="Объекты и атрибуты">
			<func name="getObject">getObject(&lt;UID&gt;) - возвращает объект с номером
				UID
				метод Objects
			</func>
			<func name="getAttr">Возвращает значение атрибута, указанного в пути
				&lt;Path&gt;.
				В случае, если путь указывает на множественный атрибут, метод
				возвращает последнее значение множества атрибутов.
				Метод может вернуть все значения множества атрибутов в виде массива,
				если к пути добавить символы квадратных скобок []:
				getAttr("&lt;Path&gt;[]") .
				Метод object.

				ПРИМЕР.
				$my_object.getAttr("&lt;Path&gt;")

				ПРИМЕР СОЗДАНИЯ МАССИВА
				#set( $my_array = $my_object.getAttr("&lt;Path&gt;[]")</func>
			<func name="setAttr"></func>
			<func name="createObject"></func>
			<func name="get"></func>
			<func name="cloneObject"></func>
			<func name="find"></func>
			<func name="deleteAttr"></func>
			<func name="getLocker">Возвращает имя процесса в котором обрабатывается
				объект</func>
			<func name="lock">Устанавливает объекту имя процесса, в котором он
				обрабатывается и, тем самым, вызывает блокирование объекта,
				обрабатываемым процессом.
			</func>
			<func name="filter">filter(&lt;UID фильтра&gt;, $map, log_var)
				где:
				$map -имена параметров и их значений для фильтра
				log_var - логическая переменная true - применить
				фильтр ко всем транзакциям, false - применить
				фильтр только к нулевым транзакциям.
				Метод Objects.
			</func>
			<func name="createMap">createMap() - создает map.
				Метод Objects.
			</func>
			<func name="put">put(&lt;имя&gt;, $var) - помещает элемент в map
			</func>
			<func name="createList">createList() - создает пустой одномерный массив
				метод $Objects
			</func>
			<func name="add">add(&lt;$var&gt;) - добавляет элемент в одномерный
				массив
				метод массива
			</func>
			<func name="contains">contains(&lt;$var&gt;) - проверяет, содержится ли в
				одномерном массиве
				элемент $var
				метод массива
				возвращает true или false
			</func>
			<func name="delete"></func>
			<func name="unlock"></func>
			<func name="getClass"></func>
			<func name="getClassObjects"></func>
			<func name="getDay"></func>
			<func name="getDayOfWeek"></func>
			<func name="getMonth"></func>
			<func name="getYear"></func>
			<func name="getKrnObject"></func>
			<func name="uid"></func>
			<func name="getIndex"></func>
			<func name="CheckRNNFiz"></func>
			<func name="addMonths"></func>
			<func name="addWeeks"></func>
			<func name="addYears"></func>
			<func name="getDate"></func>
			<func name="getDaysAfter"></func>
			<func name="remove"></func>
			<func name="setFilterParam"></func>
			<func name="isLock"></func>
			<func name="like"></func>
			<func name="clone"></func>
			<func name="printVar"></func>
			<func name="println"></func>
			<func name="getUID"></func>
			<func name="getCls">возвращает класс как объект</func>
			<func name="getConflictLocker"></func>
			<func name="createSet"></func>
			<func name="getId">возвращает ID объекта
				#set($id = $obj.getId())
			</func>
			<func name="getSelection"></func>
		</folder>
		<folder name="Функции проверки">
			<func name="checkBIN"></func>
			<func name="checkIN"></func>
			<func name="checkRNN"></func>
			<func name="checkOKPO"></func>
			<func name="checkRNNFiz"></func>
			<func name="checkRNNUl"></func>
		</folder>
		<folder name="Генерирование номеров">
			<func name="makeBIN"></func>
			<func name="makeMsgID"></func>
			<func name="makeOKPO"></func>
			<func name="makeRNN"></func>
			<func name="getNextNumber"></func>
		</folder>
		<folder name="Функции времени">
			<func name="getCurrDate"></func>
			<func name="after"></func>
			<func name="before"></func>
			<func name="getCurrTime"></func>
			<func name="addDays"></func>
			<func name="getPeriod"></func>
			<func name="getMinutesAfter">Т1 - начало периода
				Т2 - конец периода
				$P - продолжительность периода в минутах (целых без округления)

				#set($P = T2.getMinutesAfter(T1))
			</func>
			<func name="getHoursAfter">Т1 - начало периода
				Т2 - конец периода
				$P - продолжительность периода часах (целых без округления)

				#set($P = T2.getHoursAfter(T1))
			</func>
			<func name="addMinutes"></func>
			<func name="getHours"></func>
			<func name="getMinutes"></func>
			<func name="addHours"></func>
			<func name="getYearDateStart"></func>
			<func name="getPeriodAfter"></func>
		</folder>
		<func name="exec">исполение вызываемого метода на клиенте</func>
		<folder name="Массивы">
			<func name="removeAll">removeAll($list)
				Метод массива.
				Удаляет все элементы массива,
				совпавшие с элементами массива $list

				ПРИМЕР: $list1.removeAll($list2)
				В массиве $list1 удляются все элементы совпавшие
				с элементами массива $list2
			</func>
			<func name="set">Помещает значение переменной в элемент массива
				$arrVariable.set($indVariable, $variable)
				элементу массива arrVariable с индексом $indVariable присваивается значение
				$variable
			</func>
		</folder>
		<folder name="Числа">
			<func name="floor"></func>
			<func name="round"></func>
		</folder>
		<func name="sexec">исполение вызываемого метода на сервере</func>
		<func name="showConfirmMessage">integer = $Systems.showConfirmMessage(string)

			Выводит диалог подтверждения действий с кнопками "Да", "Нет".
			Возвращает 3, если пользователь нажал кнопку диалога "Да" и
			4, если "Нет"

			Пример:
			#set($solution = $Systems.showConfirmMessage("Текст"))
		</func>
	</folder>
	<folder name="OR3 Language">
		<func name="Вводная часть">ВВОДНАЯ ЧАСТЬ

			Основной принцип в использовании внутреннего языка проектирования OR3
			Language состоит
			в том, что он не является компилируемой частью исполняемого кода. Все
			инструкции, написанные на
			OR3 Language, хранятся в БД в текстовом виде. Интерпретация кода
			производится в соответствующем месте
			и в нужное время. Применение фрагментов настройки информационных
			систем, написанных на OR3 Language,
			предусматривается повсеместно: в интерфейсах, процессах, методах, фильтрах, отчетах.
			Понятия объектно-ориентированной модели данных, фильтра, процесса,
			метода, интерфейса,
			«выведенные на поверхность» для применения в качестве основных участков
			информационного
			проектирования и скрывающие от проектировщика всю сложность своей реализации,
			являются основными
			инструментами технологии проектирования OR3. На долю OR3 Language приходится
			решение задач
			сравнительно простого манипулирования объектами классов и вычисления.

			Реализация интерпретатора языка OR3 Language выполнена на основе общедоступной
			технологии
			JavaCC. Удобство OR3 Language заключаются в том, что в случаях сложных
			обработок, разрабатывается
			Java-класс, затем в виде plug-in он подключается к проекту и проектировщик
			приложений в OR3 получает
			мощный механизм обработки, «скрывающий» всю сложность своей реализации.
			Можно так же писать код, напрямую, используя операторы Java. Это
			обеспечивает язык OR3 Language всей
			гибкостью и мощью Java.
			Классы Java, реализующие объектно-ориентированную технологию языковой
			обработки OR3
			следующие:
			- Objects – класс, реализующий методы манипулирования объектами БД;
			- Strings – класс, реализующий методы обработки строк;
			- Date – класс, реализующий методы обработки дат;
			- Interface – класс, реализующий методы доступа к данным, выведенным в
			интерфейсы;
			- Math – класс, методы обработки чисел;
			- Xml – класс, реализующий методы манипулирования Xml-структурами.
			При написании фрагментов кода на OR3 Language используются системные
			переменные,
			существование которых связано как со свойствами самого продукта OR3, так и со
			свойствами той
			виртуальной реальности, какой является информационный проект в самом общем
			смысле.
			то следующие переменные:
			- RETURN – переменная, в которую помещается значение, возвращаемое
			фрагментом кода;
			- XML – переменная, в которую процессом помещается текущая
			XML-структура;
			- OBJS – переменная сервера, в которую процессом помещается массив
			параметров, передаваемый
			в вызываемую во фрагменте кода функцию;
			- SELOBJ – переменная сервера, в которую процессом помещается объект,
			выбранный
			пользователем фокусом ввода на интерфейсе типа «Выбор»;
			- SELOBJS – переменная на клиенте, в которую помещается массив
			объектов, выбранных фокусом
			ввода пользователем на интерфейсе;
			- $INTERFACE – переменная сервера, в которую помещается результат
			проверки ошибок ввода
			данных интерфейса; если ошибок нет, $INTERFACE содержит true; если ошибки
			есть, $INTERFACE содержит false;
			если проверки ошибок не производилось, $INTERFACE содержит null.
			Переменная используется при
			проектировании бизнес-процессов;
			- ERRMSG – переменная, в которую помещается текст сообщения об ошибке
			интерфейса,
			выводящийся, в последующем, в стандартном окне ошибок интерфейса OR3;
			- SERVER – переменная, служащая для присвоения значения текущей
			переменной USER.
			Используется для случаев передачи серверу исполнения текущего шага процесса.
			- BASE – переменная, в которую процессом помещается объектный код
			текущей БД, с которой
			работает процесс;
			- USER – переменная, в которую процессом помещается, объектный код
			пользователя,
			исполняющего текущий шаг процесса;
			- true – литеральная строка, служащая для обозначения состояния
			«истина»;
			- false – литеральная строка, служащая для обозначения состояния
			«ложь».

		</func>
		<func name="Разделители">РАЗДЕЛИТЕЛИ

			«( )», «[ ]», «{ }», «;», «.», «,»
		</func>
		<func name="Операторы">ОПЕРАТОРЫ

			Операторы используются в различных операциях - арифметических, логических,
			битовых.
			Есть операции сравнения и присваивания. Следующие 17 лексем (все состоят
			только из ASCII-символов)
			являются операторами языка Java:
			= присвоение,
			&gt;, &lt; , = =, &lt;= , &gt;= , != бинарные операторы отношения
			! отрицание
			&amp;&amp; логическое И
			| | логическое ИЛИ
			+, -, *, / арифметические операции
			% возвращает остаток от деления целого числа на целое число
			*/, /* блочный комментарий

			Большинство из них вполне очевидны и хорошо известны из других языков
			программирования.
			Некоторые нюансы в работе с операторами в Java все же присутствуют, поэтому,
			взяв любое пособие по языку
			Java, Вы можете найти необходимые краткие комментарии по ним. Все
			указанные операторы поддерживаются в
			OR3 Language.
		</func>
		<func name="Операторы выбора">ОПЕРАТОРЫ ВЫБОРА

			ОПЕРАТОР if

			OR3 Language поддерживает единственный оператор выбора if, направляющий
			выполнение программы по двум
			разным маршрутам (его называют еще оператором условного перехода):

			#if(condition)
			statement1
			#else
			statement2
			#end

			condition – любое выражение, возвращающее значение типа boolean.
			statementN – один или несколько операторов маршрута.
			Предложение #else не обязательное. Если condition возвращает true, выполняется
			Statement1, иначе
			выполняет-ся Statement2.

			МНОГОЗВЕННЫЙ ОПЕРАТОР if-else-if

			Общую программную конструкцию, основанную на последовательности вложенных
			if, называют
			многозвенным if-else-if:

			#if(condition1)
			statement1
			#elseif(condition2)
			statement2
			#elseif(condition3)
			statement3
			.
			.
			.
			#else
			statementN
			#end
			Операторы #if выполняются сверху вниз. Как только одно из условий condition i
			возвратит true,
			оператор или цепь операторов condition i выполняется, а остальная часть
			многозвенной схемы пропускается.
			Если ни одно из условий не true, то выполнится оператор #else.
			Если последний #else отсутствует и все другие условия - false, никакое
			действие не выполняется.

		</func>
		<func name="Операторы цикла">ОПЕРАТОРЫ ЦИКЛА

			Цикл повторно выполняет один и тот же набор операторов, пока не
			выполнится условие завершения.


			ОПЕРАТОР foreach

			Оператор повторяет оператор или группу операторов, для каждого элемента
			заданного массива, начиная с
			первого.

			#foreach($item in $variable)
			statement
			#end
			$item переменная, в которую помещается очередной элемент массива из
			$variable при
			возобновлении цикла.
			statement – один или несколько операторов тела цикла.


			ОПЕРАТОР while

			Оператор повторяет оператор или группу операторов, пока его управляющее
			выражение имеет
			значение true.

			#while(condition)
			statement
			#end
			condition – любое выражение, возвращающее значение типа boolean.
			statementN – один или несколько операторов тела цикла.
			Когда condition становится false, управление передается строке кода,
			сле-дующей непосредственно
			за словом #end.


			ОПЕРАТОР do while

			Иногда тело цикла необходимо выполнить даже тогда, когда управляющее
			выражение цикла имеет
			значение false, т.е. проверить выполнение управляющего выражения цикла не в
			на-чале, а в конце цикла.
			Цикл do while выполняет операторы, находящиеся внутри него, по крайней
			мере, один раз.

			#do
			statement
			#while(condition)

		</func>
		<folder name="Методы класса Objects">
			<func name="Методы класса Objects">МЕТОДЫ КЛАССА Objects

				1. Создать объект указанного класса в БД
				Object createObject(string className) – создает объект в классе с именем
				className.

				Пример: $person = $Objects.createObject(“Персонал”)

				2. Найти в БД объект по коду uid
				Object getObject(string uid) – находит в БД объект с номером uid.

				Пример: $obj = $Objects.getObject(“17821.30884”)

				3. Найти в БД объект по коду id
				Object getObject(long id) – находит в БД объект с номером id.

				Пример: $obj = $Objects.getObject(30884)

				4. Найти в БД объект с заданным значением атрибута
				Object find(string className.attrName, attrValue) – находит объект в
				классе className у которого
				атрибут attrName имеет значение, равное attrValue.

				Пример: $var = $Objects.find(“Юрлицо.БИН”, “009124000321”)

				Оператор find ищет значение атрибута, напрямую связанного с классом.
				Конструкция className.className.attrName неприемлема.

				5. Создать объект Map - ассоциативный массив элементов {ключ,
				параметр}
				Map createMap() – создает объект Map.

				Пример: $map1 = $Objects.createMap()

				6. Создать объект Set – набор уникальных элементов
				Set createSet() – создает объект Set.

				Пример: $set1 = $Objects.createSet()

				7.Создать объект List – список параметров
				List createList() – создает объект List.

				Пример: $list1 = $Objects.createList()

				8. Найти в БД объекты, удовлетворяющие критериям фильтра
				List filter(Filter filter) - возвращает список объектов

				Пример:
				$list1 = $Objects.filter($Objects.get$Object(“34783.19876”))

				9. Найти в БД объекты, удовлетворяющие критериям фильтра c
				предустановленными параметрами
				List filter(Filter filter, Map map, Boolean allTransactions) -
				возвращает список объектов

				map - объект Map с именами и значениями параметров, используемыми
				фильтром filter
				allTransactions – логическая переменная, принимающая значение true или false.
				true – применить фильтр ко всем транзакциям (использовать все объекты, в
				том числе и
				захваченные в обработку процессами).
				false – применить фильтр только к нулевым транзакциям (использовать все
				объекты,
				исключая объекты, захваченные в обработку процессами).

				Пример:
				$params = $Objects.createMap()
				$params.put("%Подразделение", $podr)
				$list1 = $Objects.filter($Objects.get$Object(“34783.19876”), $params,
				false)

				10. Установить параметры фильтра
				setFilterParam(Filter filter, Map map) – с помощью Map устанавливает параметры для
				указанного
				фильтра

				Пример:
				$Objects.setFilterParam($Objects.getObject(“34783.19876”), $params)

				11. Получить параметр фильтра
				Value getFilterParam(Filter filter, String paramName) – возвращает
				значение параметра
				содержащегося с именем paramName в Map

				Пример:
				$var =$Ob-jects.getFilterParam($Objects.getObject(“34783.19876”),
				“%podr”)

				12. Очистить параметры фильтра
				clearFilterParam(Filter filter) – очищает параметры указанного фильтра

				Пример:
				$Objects.clearFilterParam($Objects.getObject(“34783.19876”))

				13. Получить объекты заданного класса
				getClassObjects(String className) - возвращает список объектов

				Пример: $list1 = $Objects.getClassObjects(“Персонал”)

			</func>
			<func name="Методы Map">МЕТОДЫ Map

				1. Поместить ассоциативный элемент в Map по ключу
				put(key, value) - если ключ в Map не найден создает в Map новый
				ассоциативный элемент
				{key, value}. Если ключ найден – записывает новое значение параметра по
				найденному ключу.
				key – ключ.
				value – значение параметра, помещаемого в объект Map.

				Пример: $map1.put("%Подразделение", $podr)

				2. Поместить один объект Map в другой объект Map (объединить два
				объекта Map)
				putAll(Map $map) – по всем найденным ключам записываются новые значения
				параметров,
				по не найденным ключам в Map вписываются новые ассоциативные элементы.

				Пример: $map1.putAll($map2)

				3. Извлечь параметр из Map по ключу
				Value get(key) - возвращает параметр по ключу key

				Пример: $podr = $map1.get("%Подразделение")

				4. Проверить, содержится ли ассоциативный элемент с искомым ключом в
				Map
				Boolean containsKey(key) - возвращает TRUE или FALSE

				Пример: $isPodr = $map1.containsKey("%Подразделение")
				if(!$isPodr) {
				$Systems.println(“Не задано подразделение”)
				}

				5. Проверить, содержится ли ассоциативный элемент с искомым значением
				параметра в объекте Map
				Boolean containsValue(value) - возвращает TRUE или FALSE

				Пример: $isNamePodr = $map1.containsValue($podr1)
				if(!$isNamePodr) {
				$Systems.println(“Не задано наименование подразделения”)
				}

				6. Получить множество ключей объекта Map в объекте Set
				Set keySet() - возвращает множество ключей, содержащихся в Map

				Пример: $paramNames = $map1.keySet()
				foreach($paramName in $paramNames) {
				$value = $map1.get($paramName)
				$Systems.println(“Параметр $paramName равен $value”)
				}

				7. Получить множество значений объекта Map
				Set values() - возвращает список значений, содержащихся в Map

				Пример: $params = $map1.values()
				foreach($param in $params) {
				$Systems.println($param)
				}

				8. Удалить по ключу ассоциативный элемент из объекта Map
				Value remove(key) – удаляет ассоциативный элемент {key, value} из объекта
				Map и
				возвращает значение удаленного параметра (если ключ не найден – возвращает
				NULL).

				Пример: $podr = $map1.remove("%Подразделение")

				9. Очистить объект Map
				clear() – удаляет все ассоциативные элементы из объекта Map.

				Пример: $map1.clear()

				10. Определить, количество элементов, содержащихся в объекте Map
				Long size() - возвращает число элементов Map

				Пример: $count = $map1.size()

				11. Определить, является ли объект Map пустым
				Boolean isEmpty() - возвращает TRUE или FALSE

				Пример: $var = $map1.isEmpty()

			</func>
			<func name="Методы Set">МЕТОДЫ Set

				1. Добавить элемент в объект Set
				add(value) - если в объекте Set такой элемент содержится, добавление не
				производится.
				Возвращает TRUE если добавление произошло и FALSE, если добавить элемент не
				удалось.

				Пример: $isUnite = $set1.add($podr)

				2. Поместить один объект Set в другой объект Set (объединить два
				объекта Set)
				addAll(Set set) – все элементы набора set2,не совпавшие с элементами набора
				set1
				вписываются в набор set1. Возвращает TRUE если добавление произошло и FALSE,
				если ни одного
				элемента добавить не удалось.

				Пример: $isUnite = $set1.addAll($set2)

				3. Удалить элемент из объекта Set
				remove(value) - если в объекте Set такой элемент содержится, производится его
				удаление.
				Возвращает TRUE, если удаление произошло и FALSE, если удаление элемента не
				состоялось.

				Пример: $isDel = $set1.remove($podr)

				4. Удалить элементы из объекта Set, содержащиеся в другом объекте Set
				removeAll(Set set) - возвращает TRUE, если хотя бы одно удаление
				произошло и FALSE,
				если ни одного удаления элемента не состоялось.

				Пример: $isDel = $set1.removeAll($set2)

				5. Удалить элементы из объекта Set, НЕ содержащиеся в другом объекте
				Set
				retainAll(Set set) - возвращает TRUE, если хотя бы одно удаление произошло и
				FALSE,
				если ни одного удаления элемента не состоялось.

				Пример: $isDel = $set1.retainAll($set2)

				6. Очистить объект Set
				clear() – удаляет из объекта Set все элементы

				Пример: $set1.clear()

				7. Проверить, содержится ли искомый элемент в объекте Set
				Boolean contains(value) - возвращает TRUE или FALSE

				Пример: $isPodr = $set1.contains($podr)
				if(!$isPodr) {
				$Systems.println(“В списке нет подразделения”)
				}

				8. Определить, количество элементов, содержащихся в объекте Set
				Long size() - возвращает число элементов Set

				Пример: $count = $set1.size()

				9. Определить, является ли объект Set пустым
				Boolean isEmpty() - возвращает TRUE или FALSE

				Пример: $var = $set1.isEmpty()
			</func>
			<func name="Методы List">МЕТОДЫ List

				1. Добавить элемент в List
				add(value) – в результате выполнения оператора размер списка увеличивается на
				единицу.
				Добавление производится в конец списка.

				Пример: $list1.add($podr)

				2. Добавить элемент в List по индексу
				add(Long index, value) – в результате выполнения оператора размер списка
				увеличивается
				на единицу. Существующий в списке элемент с номером index и все
				следующие за ним элементы получают
				номера большие на единицу, а добавляемый элемент приобретает в списке
				номер index.

				Пример: $list1.add(5, $podr)

				3. Вставить элемент в List по индексу
				set(Long index, value) – в результате выполнения оператора размер списка не
				увеличива-ется.
				Существующий в списке элемент с номером index заменяется на значение value.

				Пример: $list1.set(5, $podr)

				4. Поместить объект List в другой объект List (объединить два объекта
				List)
				addAll(List list) – все элементы списка list2, вписываются в список list1.
				Размерность списка list1 увеличивается на величину размерности
				списка list2.
				Первый элемент списка list2 вписывается в список list1 после его
				последнего элемента.

				Пример: $list1.addAll($list2)

				5. Поместить объект List в другой объект List (объединить два объекта
				List) по индексу
				addAll(Long index, List list) – все элементы списка list2, вписываются в список
				list1,
				начиная с номера index. Размерность списка list1 увеличивается на величину
				размерности списка list2.

				Пример: $list1.addAll(3, $list2)

				6. Удалить элемент из списка List по значению
				Boolean remove(value) - если в списке List такой элемент содержится,
				производится его
				удаление. Удаляется первый встретившийся слева элемент. Возвращает TRUE, если
				удаление произошло и
				FALSE, если удаление элемента не состоялось.

				Пример: $isDel = $list1.remove(“Ахмет”)

				7. Удалить элемент из списка List по индексу
				remove(Long index) - в списке List удаляется элемент с номером index.
				Размерность списка
				уменьшается на единицу. Если величина индекса превосходит размер списка
				Java-машина выдает
				сообщение об ошибке

				Пример: $list1.remove(4)

				8. Удалить элементы из списка List, содержащиеся в другом объекте List
				Boolean removeAll(List list) - возвращает TRUE, если хотя бы одно
				удаление произошло и FALSE,
				если ни одного удаления элемента не состоялось.

				Пример: $isDel = $list1.removeAll($list2)

				9. Удалить элементы из объекта List, НЕ содержащиеся в другом объекте
				List
				Boolean retainAll(List list) - возвращает TRUE, если хотя бы одно удаление
				произошло и FALSE,
				если ни одного удаления элемента не состоялось.

				Пример: $isDel = $list1.retainAll($list2)

				10. Получить элемент списка List по индексу
				Value get(Long index) – возвращает значение элемента с номером: index.

				Пример: $var = $list1.get(3)

				11. Выделить элементы в списке List по индексу
				List subList(Long index1, Long index2) – выделяет полуинтервал элементов
				с номерами:
				index1 – включая, index2 – исключая.

				Пример: $list2 = $list1.subList(3, 7)

				12. Определить индекс первого элемента в списке List по заданному
				значению
				Long indexOf(value) – возвращает индекс первого встретившегося элемента
				со значением
				равным заданному.

				Пример: $var = $list1.indexOf($podr)

				13. Определить индекс последнего элемента в списке List по заданному
				значению
				LastIndexOf(value) – возвращает индекс последнего встретившегося элемента со значением
				равным заданному.

				Пример: $var = $list1.LastIndexOf($podr)

				14. Очистить объект List
				clear()

				Пример: $lis1.clear()

				15. Проверить, содержится ли искомый элемент в объекте List
				Boolean contains(value) - возвращает TRUE или FALSE

				Пример: $isPodr = $list1.contains($podr)
				if(!$isPodr) {
				$Systems.println(“В списке нет подразделения”)
				}

				16. Определить, количество элементов, содержащихся в объекте List
				Long size() - возвращает число элементов List

				Пример: $count = $list1.size()

				17. Определить, является ли объект List пустым
				Boolean isEmpty() - возвращает TRUE или FALSE

				Пример: $var = $list1.isEmpty()
			</func>
			<folder name="Методы класса Interface">
				<func name="getVar">создает переменную интерфейса, живущую на время его
					изображения и
					видимую из всех событий интерфейса

					#set($par = $Interface.getVar())
				</func>
			</folder>
		</folder>
		<func name="Методы объектов">МЕТОДЫ ОБЪЕКТОВ

			1. Получить id объекта
			Long getId() - возвращает id объекта

			Пример: $var = $obj.getId()

			2. Получить uid объекта
			String getUid() - возвращает uid объекта

			Пример: $var = $obj.getUid()

			3. Получить класс объекта
			Object getCls() - возвращает класс объекта как объект

			Пример: $obj = $person.getCls()

			4. Получить указанный атрибут объекта
			Value getAttr(String className.attrName) - возвращает атрибут объекта

			Пример: $birth = $person.getAttr(“Персонал.дата рождения”)

			5. Получить указанный текстовый атрибут объекта на заданном языке
			String getAttr(String className.attrName, Object Language) -
			возвращает атрибут на указанном
			в Language языке

			Пример: $ru = $Objects.getObject(“102”)
			$fam = $person.getAttr(“Персонал.фамилия”, $ru)

			6. Вписать атрибут в объект
			setAttr(String className.attrName, value) - вписывает атрибут в объект

			Пример: $person.setAttr(“Персонал.дата рождения”, $birth)

			7. Вписать текстовый атрибут объекта на заданном языке
			setAttr(String className.attrName, value, Object Language) - вписывает атрибут на
			указанном
			в Language языке

			Пример: $ru = $Objects.getObject(“102”)
			$person.setAttr(“Персонал.фамилия”, $fam, $ru)

			8. Удалить атрибут в объекте
			deleteAttr(String className.attrName) - удаляет атрибут объекта

			Пример: $person.deleteAttr(“Персонал.дата рождения”)
			удаляет связь с объектом
			$person.deleteAttr(“Персонал.приказ о перемещении”)
			$person.deleteAttr(“Персонал.приказ о перемещении[]”)

			9. Каскадно удалить атрибут в объекте
			deleteAttr(String className.attrName, Boolean cascade) - удаляет атрибут объекта и
			если тип
			атрибута объектный, удаляет и сам объект

			Пример: $person.deleteAttr(“Персонал.приказ о перемещении”, true)
			$person.deleteAttr(“Персонал.приказ о перемещении[]”, true)

			10. Удалить атрибут в объекте по индексу
			deleteAttr(String className.attrName, Long index) - удаляет атрибут объекта по
			указанному
			номеру в index. Применяется только для множественных типов атрибутов
			массивов.

			Пример: $person.deleteAttr(“Персонал.приказ о перемещении”, 5)

			11. Удалить атрибут в объекте по значению
			deleteAttr(String className.attrName, value) - удаляет атрибут объекта по указанному в
			value значению. Применяется только для множественных типов атрибутов
			– наборов.

			Пример: $person.deleteAttr(“Персонал.приказ о перемещении”, $prikaz)

			12. Уничтожить объект в БД
			delete() - удаляет объект.

			Пример: $person.delete()

			13. Создать клон объекта в БД
			Object clone() – возвращает копию объекта.

			Пример: $person2 = $person1.clone()

			14. Сравнить объекты
			Boolean equals(Object obj) - сравнивает объектные коды объектов. Возвращает
			TRUE или FALSE.

			Пример:
			if($obj1.equals($obj2)) {
			$Systems.println(“Объектные коды равны”)
			}

			15. Сравнить атрибуты объектов
			Boolean like(Object obj) - сравнивает атрибуты объектов. Возвращает TRUE или
			FALSE.

			Пример:
			if($obj1.like($obj2)) {
			$Systems.println(“Атрибуты объектов равны”)
			}

			16. Заблокировать объект
			lock() – устанавливает блокировку объекта текущим потоком процесса.

			Пример:
			$obj1.lock()

			17. Разблокировать объект
			unLock() – снимает блокировку объекта текущим потоком процесса.

			Пример:
			$obj1.unLock()

			18. Проверить, заблокирован ли объект указанным процессом
			Boolean isLock(Object service) – проверяет состояние блокировки объекта
			указанным в
			service процессом. Возвращает TRUE или FALSE.

			Пример:
			if($obj1.isLock($Objects.getObject(“32987.12876”)) {
			$Systems.println(“Объект заблокирован процессом “Прием на работу””)
			}

			19. Определить, блокировку объекта указанным процессом
			ObjectWorkFlow getLocker(Object service) – возвращает объектный код потока
			указанного
			процесса, заблокировавшего объект. Если блокировка отсутствует – возвращает
			NULL

			Пример:
			$obj = $obj1.getLocker($Objects.getObject(“32987.12876”))

			20. Выполнить метод
			Object exec(String methodName, args) – выполняет метод на объекте

			Пример:
			$var = $person.exec(“дать последний приказ о перемещении”, $date)
		</func>
		<func name="Методы класса Strings">МЕТОДЫ КЛАССА Strings

			1. Преобразовать текст в целое число
			Integer toLong(String str) – преобразовывает текст в целое число

			Пример:
			$dig = $Strings.toLong(“3723”)

			2. Преобразовать текст в число с запятой
			Float toFloat (String str) – преобразовывает текст в число с запятой

			Пример:
			$dig = $Strings.toFloat(“3723.5”)

			3. Преобразовать текст в дату
			Date toDate(String str, String fmt) – преобразовывает текст указанного
			формата в fmt в дату
			Максимальный формат даты и времени: dd.MM.yyyy hh:mm:ss:SSS
			dd – день;
			MM – месяц;
			yyyy – год;
			hh – час;
			mm – минуты;
			ss – секунды;
			SSS – миллисекунды.

			Пример:
			$birth = $Strings.toDate(“25.11.1979”, “dd.MM.yyyy”)

			Символы строки форматирования:
			Символ Описание
			a AM или PM (Ante Meridiem / Post Meridiem)
			d День месяца (1 – 31)
			h Час в AM / PM (1 – 12)
			k Час в дне (1 – 24)
			m Минута в часе (0 – 59)
			s Секунда в минуте (0 – 59)
			w Неделя года (1 – 52)
			y Год
			z Временная зона
			D День года (1 – 366)
			E День недели (например, Среда)
			F День недели в месяце
			G Эра (AD (Anno Domini, наша эра) или BC (Before Crist, до нашей эры))
			H Час в дне (0 – 23)
			K Час в AM / PM (0 – 11)
			M Месяц
			S Миллисекунда
			W Неделя месяца (1 – 5)
			? Escape-символ

			В большинстве случаев количество повторений символа определяет, как
			это данное
			представляется. Текстовая информация отображается в сокращенной форме, если символ
			образца в
			оспроизведен меньше чем четыре раза. Иначе используется несокращенная форма.
			Например, zzzz
			может отображать Pacific DayLight Time, а образец zzz – PDT.
			Для чисел количество повторений символа определяет, сколько цифр
			представляется.
			Например, hh:mm:ss может представлять 01:51:15, но h:m:s отображает то же
			значение времени как 1:51:15.
			Наконец, M или MM заставляют отображать месяц как одну или две цифры. Однако
			три или
			большее количество повторений M отображает месяц как текстовую строку.

			4. Преобразовать целое число в текст
			String toString(Number number, Number digitCount) – преобразовывает целое
			число в текст с
			указанным в digitCount количеством цифр

			Пример:

			$text = $Strings.toString(372, 3)

			5. Определить, является ли текст цифровой информацией
			Boolean isDigit(String str) – возвращает TRUE или FALSE

			Пример:
			$var = $Strings.isDigit(text)
			If($var) {
			$Systems.println(“текст является числом”)
			{

			6. Преобразовать значение целого числа в символьное выражение
			String convertLongToText(Number number) - текстовое выражение числа

			Пример:
			$text = $Strings.convertLongToText(152)

			7. Преобразовать значение целого числа в символьное выражение в падеже
			и роде
			String convertLongToText(Number number, Number род, Number падеж) -
			символьное выражение числа
			в указанном роде и падеже
			Значения праметра род:
			0 мужской
			1 женский
			2 средний
			Значение параметра падеж:
			0 именительный
			1 родительный
			2 дательный
			3 винительный
			4 творительный
			5 предложный

			Пример:
			$text = $Strings.convertLongToText(152, 1, 3)

			8. Преобразовать значение целого числа в символьное выражение на
			КАЗАХСКОМ языке
			String convertLongToTextKaz(Number number) - текстовое выражение числа на
			казахском языке

			Пример:
			$text = $Strings.convertLongToTextKaz(152)

		</func>
		<func name="Методы класса Date">МЕТОДЫ КЛАССА Date

			1. Получить текущую дату
			Date getCurrDate() – возвращает текущую дату

			Пример:
			$date = $Date.getCurrDate()

			2. Получить дату на основе номеров дня, месяца и года
			Date getDate(Number year, Number month, Number day) – возвращает дату.
			Если номера дня и месяца
			выходят за пределы естественного, Java машина выдает сообщение об ошибке.

			Пример:
			$date = $Date.getDate(2008, 7, 25)

			3. Получить текущее время
			Time getCurrTime() – возвращает текущее время

			Пример:
			$time = $Date.getCurrTime()

			4. Получить период
			List&lt;Long&gt; getPeriod(Date date1, Date date2) – возвращает массив чисел &lt;лет,
			месяцев, дней, часов,
			минут, секунд, миллисекунд&gt;, содержащихся в указанном периоде.

			Пример:
			$time = $Date.getPeriod($date1, $date2)
		</func>
		<func name="Методы класса Math">МЕТОДА КЛАССА Math

			1. Округлить число до целого
			Long round(Float float) – возвращает целое число

			Пример:
			$dig = $Math.round(5,5)

			2. Округлить число до требуемой точности
			Float round(Float float, Long long) – возвращает число, округленное до
			знаков, количество
			которых указано в long

			Пример:
			$flo2 = $Math.round($flo1, 2)

			3. Определить нижнюю целую границу числа
			Long floor(Float float) – возвращает нижнюю целую границу числа

			Пример:
			$dig = $Math.floor(5,5), Результат = 5

			4. Определить верхнюю целую границу числа
			Long ceil(Float float) – возвращает верхнюю целую границу числа

			Пример:
			$dig = $Math.ceil(5,5), Результат = 6
		</func>
		<func name="Методы дат">МЕТОДЫ ДАТ

			1. Получить год даты
			Long getYear() – возвращает номер года

			Пример:
			$nYear = $date1.getYear()

			2. Получить месяц даты
			Long getMonth() – возвращает номер месяца в году

			Пример:
			$nMonth = $date1.getMonth()

			3. Получить день даты
			Long getDay() – возвращает номер дня в месяце

			Пример:
			$nDay = $date1.getDay()

			4. Получить день недели даты
			Long getDayOfWeek() – возвращает номер дня в неделе

			Пример:
			$nDayWeek = $date1.getDayOfWeek()

			5. Получить часы
			Long getHours() – возвращает номер часа в дне

			Пример:
			$nHour = $date1.getHours()

			6. Получить минуты
			Long getMinutes() – возвращает номер минуты в часе

			Пример:
			$nMinute = $date1.getMinutes()

			7. Получить секунды
			Long getSeconds() – возвращает номер секунды в минуте

			Пример:
			$nSecond = $date1.getSeconds()

			8. Определить, предшествует ли дата указанной дате
			Boolean before(Date date) – возвращает TRUE если d1 &lt; d2 (см. пример)

			Пример:
			$var = $date1.before($date2)

			9. Определить, позднее ли дата указанной даты
			Boolean after(Date date) – возвращает TRUE если d1 &gt; d2 (см. пример)

			Пример:
			$var = $date1.after($date2)

			10. Определить, эквивалентна ли дата указанной дате
			Boolean equals(Date date) – возвращает TRUE если d1 = d2 (см. пример)

			Пример:
			$var = $date1.equals($date2)

			11. Добавить к дате указанные годы
			Date addYears(Long count) – добавляет к дате указанное в count количество
			лет. Действует
			инкрементно, т.е возвращает измененную дату.

			Пример:
			$date2 = $date1.addYears(3) после выполнения оператора $date1 = $date2

			12. Добавить к дате указанные месяцы
			Date addMonths(Long count) – добавляет к дате указанное в count
			количество месяцев.
			Действует инкрементно, т.е возвращает измененную дату.

			Пример:
			$date2 = $date1.addMonths(3) после выполнения оператора $date1 = $date2

			13. Добавить к дате указанные недели
			Date addWeeks(Long count) – добавляет к дате указанное в count количество
			недель. Действует
			инкрементно, т.е возвращает измененную дату.

			Пример:
			$date2 = $date1.addWeeks(3) после выполнения оператора $date1 = $date2

			14. Добавить к дате указанные дни
			Date addDays(Long count) – добавляет к дате указанное в count количество
			дней. Действует
			инкрементно, т.е возвращает измененную дату.

			Пример:
			$date2 = $date1.addDays(3) после выполнения оператора $date1 = $date2

			15. Добавить к дате указанные часы
			Date addHours(Long count) – добавляет к дате указанное в count количество
			часов. Действует
			инкрементно, т.е возвращает измененную дату.

			Пример:
			$date2 = $date1.addHours(3) после выполнения оператора $date1 = $date2

			16. Добавить к дате указанные минуты
			Date addMinutes(Long count) – добавляет к дате указанное в count
			количество минут. Действует
			инкрементно, т.е возвращает измененную дату.

			Пример:
			$date2 = $date1.addMinutes(3) после выполнения оператора $date1 = $date2

			17. Добавить к дате указанные секунды
			Date addSeconds(Long count) – добавляет к дате указанное в count
			количество секунд.
			Действует инкрементно, т.е возвращает измененную дату.

			Пример:
			$date2 = $date1.addSeconds(3) после выполнения оператора $date1 = $date2

			18. Определить начальную дату года даты
			Date getYearDateStart() – возвращает начальную дату года даты.

			Пример:
			$date2 = $date1.getYearDateStart()

			19. Определить конечную дату года даты
			Date getYearDateEnd() – возвращает конечную дату года даты.

			Пример:
			$date2 = $date1.getYearDateEnd()

			20. Определить количество дней до наступления даты после указанной даты
			Long getDaysAfter(Date date) – возвращает количество дней после даты
			d2 до наступления
			даты d1 (см. пример).

			Пример:
			$var = $date1.getDaysAfter($date2)

			21. Определить количество часов до наступления даты после указанной даты
			Long getHoursAfter(Date date) – возвращает количество часов после
			даты d2 до наступления
			даты d1 (см. пример).

			Пример:
			$var = $date1.getHoursAfter($date2)

			22. Определить количество минут до наступления даты после указанной даты
			Long getMinutesAfter(Date date) – возвращает количество минут после
			даты d2 до наступления
			даты d1 (см. пример).

			Пример:
			$var = $date1.getMinutesAfter($date2)

			23. Получить период до наступления даты после указанной даты
			List&lt;Long&gt; getPeriodAfter(Date date) – возвращает массив чисел
			&lt;лет, месяцев, дней, часов,
			минут, секунд, миллисекунд&gt;, содержащихся в периоде.

			Пример:
			$list = $date1.getPeriodAfter($date2)

			24. Создать клон даты
			Date clone() – возвращает копию даты.

			Пример:
			$date2 = $date1.clone()
		</func>
		<func name="Методы класса Xml">МЕТОДЫ КЛАССА Xml

			1. Создать тег XML-структуры
			Tag createElement(String tagName) – создает и возвращает тег
			XML-структуры с именем tagName.

			Пример:
			$tag = $Xml.createElement(“Person”)

			2. Поместить текст в тег
			setText(String string) – записывает текст в тег.

			Пример:
			$tag.setText(“Иванов”)

			3. Добавить дочерний тег
			addContent(Tag tag) – добавляет дочерний тег в старший (родительский) тег.

			Пример:
			$tag1.addContent($tag2)

			4. Получить дочерний тег
			Tag getChild(String parentTagName) – возвращает дочерний тег из
			указанного родительского
			тега с именем parentTagName.

			Пример:
			$tag2 = $tag1.getChild(“person”)

			5. Получить список дочерних тегов
			List&lt;Tag&gt; getChildren(String parentTagName) – возвращает список дочерних тег
			из указанного
			родительского тега с именем parentTagName.

			Пример:
			$tag2 = $tag1.getChildren(“person”)

			6. Получить содержимое тега
			String getText() – возвращает строку, являющуюся содержанием тега.

			Пример:
			$str = $tag1.getText()

			7. Получить пространство наименований
			String getNamespace() – возвращает имя пространства наименований.

			Пример:
			$str = $tag1.getNamespace()
		</func>
		<folder name="Переменные">
			<func name="Переменные $RETURN и $ERRMSG">ПЕРЕМЕННЫЕ $RETURN и ERRMSG

				Если некоторое свойство имеет возможность программирования, то фрагмент
				кода
				обязательно должен возвращать в переменной $RETURN определенное значение.
				Часто описание поведения некоторых свойств укладывается в бинарную
				логику. Например,
				активность: активен, не активен; обязательность: обязателен, не обязателен;
				ограничение:
				удовлетворяет ограничениям, не удовлетворяет ограничениям, и т.д. Во всех этих
				случаях фрагмент
				кода должен возвращать в переменной $RETURN соответствующее значение 0
				или 1. Например, фрагмент
				настройки свойства «Активность»:

				// контролируемая форма организации UID = 30824.16776, Юридическое
				лицо
				#set($orgFormControl = $Objects.getObject("30824.16776"))
				// форма организации, введенная пользователем
				#set($orgFormCurrent = $Interface.getAttr("Юрлицо.организационная форма"))
				#if($orgFormControl.equals($orgFormCurrent)) // Юридическое лицо
				#set($RETURN = 1) // элемент активен
				#else // иначе
				#set($RETURN = 0) // элемент не активен
				#end

				При настройке ограничений используется переменная $ERRMSG. Приведем
				пример:

				// имя организации
				#set($name = $Interface.getAttr("Юрлицо.наименование"))
				#if(!$name) // имя отсутствует
				#set($RETURN = 0) // не удовлетворяет ограничению
				#set($ERRMSG = "Головное ЮЛ. Данные не заполнены") // текст ошибки
				#else // имя заполнено
				#set($RETURN = 1) // удовлетворяет ограничению
				#end

				Если программирование свойства не связано с выбором определенного
				поведения, то
				фрагмент кода должен возвращать в переменной $RETURN данные, соответствующие
				смыслу
				программируемого свойства. Например, фрагмент кода свойства шага процесса
				«Заголовок» должен
				возвращать текст заголовка:

				#if($object) // объект найден
				#set($RETURN = "МОЖЕТЕ ПЕРЕЙТИ к следующему шагу") // заголовок
				#else // объект НЕ найден
				#set($RETURN = "ВВЕДИТЕ ДАННЫЕ для поиска ОБЪЕКТА") // заголовок
				#end
			</func>
			<func name="Переменная $OBJS">ПЕРЕМЕННАЯ OBJS

				Передача параметров между вызывающей и вызываемой функцией осуществляется
				через
				системную переменную $OBJS. Переменная $OBJS является одномерным массивом.
				В вызывающей функции записывается вызов:

				function($variable1, $variable2, … , $variableK)

				В вызываемой функции через переменную $OBJS принимаются значения
				переданных переменных:

				#set($funcVariable1 = $OBJS[0])
				#set($funcVariable2 = $OBJS[1])
				…
				#set($funcVariableK = $OBJS[K-1])
			</func>
			<func name="Переменные  $SELOBJ и $SELOBJS">ПЕРЕМЕННЫЕ $SELOBJ и $SELOBJS

				Многие шаги процессов настраиваются на обработку данных с применением
				пользовательского
				интерфейса. Часто приходится предоставлять пользователю возможность выбора в БД
				определенного
				объекта для обработки. Для решения этой задачи процессы могут осуществлять
				специальный вызов
				интерфейса типа «Выбор».
				$SELOBJ – переменная сервера, в которую процессом помещается объект,
				выбранный
				пользователем фокусом ввода на интерфейсе типа «Выбор».
				Аналогично переменной $XML переменная $SELOBJ – одна. Поэтому если в процессе
				будет
				несколько шагов с вызовами интерфейсов типа «Выбор», необходимо
				переопределять переменную $SELOBJ,
				например:

				#set($secondObjectVariable = $SELOBJ)

				Вообще, при использовании переменных $XML и $SELOBJ можно руководствоваться
				правилом
				обязательного их переопределения. Такая тактика обезопасит Вас от многих ошибок
				вы-полнения.

				При настройке поведения интерфейсов часто бывает необходимость
				привлекать данные из
				других интерфейсов в технологии PopUp. Назовем основной настраиваемый
				интерфейс родительским
				интерфейсом, а вызываемый интерфейс PopUp-интерфейсом.
				Так как, мы об этом говорили выше, каждый фрагмент кода на интерфейсе
				инкапсулирован,
				поэтому связь между родительским интерфейсом и PopUp-интерфейсом, в OR3
				решена при помощи
				переменной $SELOBJS.
				$SELOBJS – переменная на клиенте, в которую помещается массив объектов,
				выбранных
				фокусом ввода пользователем на интерфейсе.
				$SELOBJS – это исключительно мощный инструмент, позволяющий гибко
				настраивать
				поведение интерфейсов, так как Вы всегда можете быть уверены, что переменная
				в любой момент
				времени содержит объект или объекты, выделенный(е) пользователем фокусом
				ввода.
			</func>
			<func name="Перменная $SERVER">ПЕРЕМЕННАЯ $SERVER

				Все процессы в OR3 выполняются сервером приложений. Некоторые шаги
				процесса
				настраиваются таким образом, чтобы предоставить определенный интерфейс некоторому
				пользователю
				для ввода или изменения данных в БД. В этом случае, при исполнении
				процесса, авторизованный
				пользователь, на экране своего монитора получает от сервера приложений строку
				зада-ния. Выполнив
				задание и перейдя к другому шагу процесса, пользователь, тем самым вновь
				передает управление процессом
				серверу приложений.
				Определенные шаги процессов могут протекать самостоятельно без участия
				пользователя.
				Для того, чтобы некоторый шаг процесса не выводил строку задания ни
				одному из пользователей, свойство
				шага процесса «Назначение роли» программируется следующим образом:

				#set($RETURN = $SERVER)

				Переменную можно использовать как инструмент структурирования процессов при их
				проектировании. Если предстоит необходимость написания на OR3
				Language обширного кода, чтобы легче
				было разбираться с настройкой такого процесса, можно разбить процесс на
				несколько шагов, назначить их
				исполнение серверу и тем самым скрыть их исполнение от пользователя.
			</func>
			<func name="Переменная $BASE">ПЕРЕМЕННАЯ $BASE

				В том случае, когда система работает в распределенной среде баз
				данных и главная БД содержит
				в себе информацию все подчиненных ей баз данных, эта переменная
				является необхо-димым инструментом
				для организации ограниченного доступа авторизованного пользователя к
				ресурсам центральной БД. Задача
				ограничения доступа к объектам определенного класса в зави-симости от
				принадлежности объектов к той или
				иной БД решается проведением нескольких мероприятий.
				- в конструкторе структуры БД строится древовидная структура
				подчиненных друг другу БД;
				- в модели данных в ограничиваемом классе порождается атрибут:
				Ограничиваемый класс:Ограничиваемый класс
				место нахождения объекта:База
				- в конструкторе пользователей порождается необходимый узел
				полномочий доступа;
				- в конструкторе процессов при рождении объектов ограничиваемого
				класса Вы не забываете
				написать фрагмент кода, выполняющий присвоение значения UID текущей БД
				атрибуту «Ограничиваемый
				класс.место нахождения объекта» (например рожденный объект огра-ничиваемого
				класса находится в
				переменной $Object):
				$Object.setAttr(“Ограничиваемый класс.место нахождения объекта”, $BASE)
				- затем в фильтре, ограничивающем доступ к классу «Ограничиваемый
				класс», Вы используете
				атрибут «Ограничиваемый класс.место нахождения объекта» для построения
				соот-ветствующего критерия
				отбора объектов.



			</func>
			<func name="Переменная $USER">ПЕРЕМЕННАЯ $USER

				Поскольку USER – это переменная, в которую процессом помещается, объектный
				код
				пользователя, исполняющего текущий шаг процесса, Вы можете динамически, по ходу
				процесса,
				переопределять эту переменную и, тем самым, заставлять динамически выполнять
				различные шаги процесса
				различными пользователями в зависимости от определенных условий.
			</func>
			<func name="Переменная XML">ПЕРЕМЕННАЯ XML

				Переменная $XML используется при настройке обмена данными с другими
				информацион-ными
				системами или обмена данными внутри информационной системы, работающей в
				распределенной среде БД.
				Другими словами переменная используется в случаях приема/передачи дан-ных
				из/в БД приложения,
				с которой оно работает в текущий момент. Эта переменная является
				инструментом проектировщика
				приложения, скрывающим всю сложность реализации задачи организации внешних
				информационных потоков
				OR3. переменная связана с шагом процесса имеющего тип «Ожидание».
				Настройка такого шага процесса
				содержит возможности настройки «Пункта об-мена» и «Проверка XML».
				Программный блок OR3, реализующий «общение с внешним миром», любое
				XML-сообщение,
				поступившее в «Пункт обмена», помещает в переменную $XML.
				В свойстве «Проверка XML» Вы настраиваете критерий обнаружения
				XML-структуры, нужной
				для обработки в процессе, считая, что в переменной $XML содержится
				пришедшее XML-сообщение.
				Так как системная переменная $XML одна на весь процесс, то при
				необходимости организации
				приема нескольких XML-сообщений в одном процессе, нужно ее освобождать для
				другого XML-сообщения,
				которое поступит в эту же переменную и прежнее XML-сообщение будет
				«забыто». Эту проблему легко
				решить, употребив переопределение переменной, например:

				#set($secondXmlVariable = $XML)

			</func>
			<func name="setVar">$Interface.setVar("ru_glob",
				$Objects.getObject("0.1"))
				#set($ru = $Interface.getVar("ru_glob"))
			</func>
		</folder>
	</folder>
</folder>