package kz.tamur.shep.asynchronous;

import java.net.URL;


import javax.jws.HandlerChain;
//import javax.jws.HandlerChain;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

/**
 * This class was generated by Apache CXF 2.4.6
 * 2014-09-27T20:09:31.068+06:00
 * Generated source version: 2.4.6
 * 
 */
@WebServiceClient(name = "AsyncChannelHttpService", wsdlLocation = "AsyncChannelHttp_Service.wsdl", targetNamespace = "http://bip.bee.kz/AsyncChannel/v10/Interfaces/Binding")
@HandlerChain(file = "chain.xml")
public class AsyncChannelHttpService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://bip.bee.kz/AsyncChannel/v10/Interfaces/Binding",
            "AsyncChannelHttpService");
    public final static QName AsyncChannelHttpPort = new QName("http://bip.bee.kz/AsyncChannel/v10/Interfaces/Binding",
            "AsyncChannelHttpPort");
    static {
        URL url = AsyncChannelHttpService.class.getResource("AsyncChannelHttp_Service.wsdl");
        if (url == null) {
            java.util.logging.Logger.getLogger(AsyncChannelHttpService.class.getName()).log(java.util.logging.Level.INFO,
                    "Can not initialize the default wsdl from {0}", "AsyncChannelHttp_Service.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public AsyncChannelHttpService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public AsyncChannelHttpService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public AsyncChannelHttpService() {
        super(WSDL_LOCATION, SERVICE);
    }

    /**
     * 
     * @return
     *         returns IAsyncChannel
     */
    @WebEndpoint(name = "AsyncChannelHttpPort")
    public IAsyncChannel getAsyncChannelHttpPort() {
        return super.getPort(AsyncChannelHttpPort, IAsyncChannel.class);
    }

    /**
     * 
     * @param features
     *            A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy. Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *         returns IAsyncChannel
     */
    @WebEndpoint(name = "AsyncChannelHttpPort")
    public IAsyncChannel getAsyncChannelHttpPort(WebServiceFeature... features) {
        return super.getPort(AsyncChannelHttpPort, IAsyncChannel.class, features);
    }
}