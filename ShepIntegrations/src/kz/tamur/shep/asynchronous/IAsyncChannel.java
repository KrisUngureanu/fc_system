package kz.tamur.shep.asynchronous;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

/**
 * Интерфейс сервиса на ШЭП, для работы с асинхронным каналом
 *
 * This class was generated by Apache CXF 2.4.6
 * 2014-09-27T20:09:31.052+06:00
 * Generated source version: 2.4.6
 * 
 */
@WebService(targetNamespace = "http://bip.bee.kz/AsyncChannel/v10/Interfaces", name = "IAsyncChannel")
@XmlSeeAlso({ObjectFactory.class, kz.tamur.fc.gbdrn.report303.ObjectFactory.class, kz.tamur.fc.gbdrn.report305.ObjectFactory.class,
	kz.tamur.fc.nobd.actualization.ObjectFactory.class})
public interface IAsyncChannel {

    /**
     * Метод выборки сообщений с ШЭП по следующим параметрам:
     * -идентификатору сообщения+получателю(только для запрасившего)+идентификатору сервиса
     * -идентификатору цепочки сообщений+получателю(только для запрасившего)+идентификатору сервиса
     * -получателю(только для запрасившего)+идентификатору сервиса
     */
    @WebResult(name = "response", targetNamespace = "")
    @RequestWrapper(localName = "getMessages", targetNamespace = "http://bip.bee.kz/AsyncChannel/v10/Types", className = "kz.tamur.shep.asynchronous.GetMessages")
    @WebMethod
    @ResponseWrapper(localName = "getMessagesResponse", targetNamespace = "http://bip.bee.kz/AsyncChannel/v10/Types", className = "kz.tamur.shep.asynchronous.GetMessagesResponse")
    public kz.tamur.shep.asynchronous.AsyncGetMessagesResponse getMessages(
        @WebParam(name = "request", targetNamespace = "")
        kz.tamur.shep.asynchronous.AsyncGetMessagesRequest request
    ) throws GetMessagesGetMessagesFaultMsg;

    /**
     * Метод отправки уведомления на ШЭП о доставке или не доставке сообщения н
     */
    @WebResult(name = "response", targetNamespace = "")
    @RequestWrapper(localName = "sendDeliveryNotification", targetNamespace = "http://bip.bee.kz/AsyncChannel/v10/Types", className = "kz.tamur.shep.asynchronous.SendDeliveryNotification")
    @WebMethod
    @ResponseWrapper(localName = "sendDeliveryNotificationResponse", targetNamespace = "http://bip.bee.kz/AsyncChannel/v10/Types", className = "kz.tamur.shep.asynchronous.SendDeliveryNotificationResponse")
    public kz.tamur.shep.asynchronous.AsyncSendDeliveryNotificationResponse sendDeliveryNotification(
        @WebParam(name = "request", targetNamespace = "")
        kz.tamur.shep.asynchronous.AsyncSendDeliveryNotificationRequest request
    ) throws SendDeliveryNotificationSendDeliveryNotificationFaultMsg;

    /**
     * Метод для отправки сообщений на асинхронный канал ШЭП
     */
    @WebResult(name = "response", targetNamespace = "")
    @RequestWrapper(localName = "sendMessage", targetNamespace = "http://bip.bee.kz/AsyncChannel/v10/Types", className = "kz.tamur.shep.asynchronous.SendMessage")
    @WebMethod
    @ResponseWrapper(localName = "sendMessageResponse", targetNamespace = "http://bip.bee.kz/AsyncChannel/v10/Types", className = "kz.tamur.shep.asynchronous.SendMessageResponse")
    public kz.tamur.shep.asynchronous.AsyncSendMessageResponse sendMessage(
        @WebParam(name = "request", targetNamespace = "")
        kz.tamur.shep.asynchronous.AsyncSendMessageRequest request
    ) throws SendMessageSendMessageFaultMsg;

    /**
     * Метод получения статуса сообщения с ШЭП
     */
    @WebResult(name = "response", targetNamespace = "")
    @RequestWrapper(localName = "getMessageStatus", targetNamespace = "http://bip.bee.kz/AsyncChannel/v10/Types", className = "kz.tamur.shep.asynchronous.GetMessageStatus")
    @WebMethod
    @ResponseWrapper(localName = "getMessageStatusResponse", targetNamespace = "http://bip.bee.kz/AsyncChannel/v10/Types", className = "kz.tamur.shep.asynchronous.GetMessageStatusResponse")
    public kz.tamur.shep.asynchronous.AsyncGetMessageStatusResponse getMessageStatus(
        @WebParam(name = "request", targetNamespace = "")
        kz.tamur.shep.asynchronous.AsyncGetMessageStatusRequest request
    ) throws GetMessageStatusGetMessageStatusFaultMsg;
}
